Podstawy tworzenia pluginów Railsowych
======================================
 
Plugin w Rails to rozszerzenie lub modyfikacja oryginalnego frameworka. Co dają nam pluginy?
 
 * Programiści mogą dzielić się nowatorskimi pomysłami bez naruszania stabilnego kodu
 * Dzięki segmentacji kodu praca nad poszczególnymi funkcjonalnościami może się toczyć w swoim własnym tempie
 * Miejsce na super-ekstra-cool funkcjonalności, które niekoniecznie są warte umieszczenia w głównym kodzie...
 
Po przeczytaniu tego przewodnika będziesz potrafił:
 
 * Stworzyć od podstaw plugin
 * Pisać i uruchamiać testy dla pluginów
 * Umieszczać w swoich pluginach modele, widoki, helpery, a nawet inne pluginy
 * Pisać generatory
 * Pisać własne polecenia modułu Rake w Twoim pluginie
 * Generować dokumentację RDoc w Twoim pluginie
 * Unikać częstych błędów w 'init.rb'
 
Ten przewodnik opisuje jak stworzyć plugin, który będzie:
 
 * Rozszerzał klasy wbudowane Ruby, takie jak Hash czy String
 * Dodawał metody do modułu ActiveRecord::Base zgodnie z zasadą pluginów 'acts_as'
 * Dodawał helpera widoku, który może być używany w szablonach erb
 * Dodawał własne polecenie generatora
 * Dodawał własną metodę routingu, która może być użyta w routes.rb
 
Aby było nam łatwiej posłużymy się przykładem. Skup się i wyobraź sobie, że pasjonujesz się obserwowaniem ptaków. Twoim ulubionym gatunkiem jest... dzięcioł. Postanawiasz stworzyć plugin, który pozwoli innym developerom doświadczyć wspaniałych chwil z owym dzięciołem. Wczułeś się w rolę? Gotowy? No to zaczynamy od konfiguracji.
 
include::setup.txt[]
 
include::tests.txt[]
 
include::core_ext.txt[]
 
include::acts_as_yaffle.txt[]
 
include::models.txt[]
 
include::controllers.txt[]
 
include::helpers.txt[]
 
include::routes.txt[]
 
include::generators.txt[]
 
include::generator_commands.txt[]
 
include::migrations.txt[]
 
include::tasks.txt[]
 
include::gems.txt[]
 
include::rdoc.txt[]
 
include::appendix.txt[]