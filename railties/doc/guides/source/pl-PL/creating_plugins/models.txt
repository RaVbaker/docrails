== Modele ==

Ten rozdział opisuje jak dodać model 'Woodpecker' do naszego pluginu. Będzie on zachowywał się tak samo jak model w naszej głównej aplikacji. Przy przechowywaniu w pluginie modeli, kontrolerów, widoków i helperów, dobrym zwyczajem jest trzymanie ich w katalogach, które odzwierciedlają strukturę Railsów. W naszym przykładzie, będzie to wyglądało tak:

---------------------------------------------------------
vendor/plugins/yaffle/
|-- lib
|   |-- app
|   |   |-- controllers
|   |   |-- helpers
|   |   |-- models
|   |   |   `-- woodpecker.rb
|   |   `-- views
|   |-- yaffle
|   |   |-- acts_as_yaffle.rb
|   |   |-- commands.rb
|   |   `-- core_ext.rb
|   `-- yaffle.rb
---------------------------------------------------------

Jak zwykle rozpoczniemy od testu:

*vendor/plugins/yaffle/test/woodpecker_test.rb:*

[source, ruby]
----------------------------------------------
require File.dirname(__FILE__) + '/test_helper.rb'

class WoodpeckerTest < Test::Unit::TestCase
  load_schema

  def test_woodpecker
    assert_kind_of Woodpecker, Woodpecker.new
  end
end
----------------------------------------------

Ten prościutki test sprawdza tylko, czy klasa jest załadowana poprawnie. Oczywiście, przy próbie uruchomienia `rake` sypnie nam radośnie błędami. Aby test wypadł pozytywnie musimy dokonać następujących modyfikacji:

*vendor/plugins/yaffle/lib/yaffle.rb:*

[source, ruby]
----------------------------------------------
%w{ models }.each do |dir|
  path = File.join(File.dirname(__FILE__), 'app', dir)
  $LOAD_PATH << path
  ActiveSupport::Dependencies.load_paths << path
  ActiveSupport::Dependencies.load_once_paths.delete(path)
end
----------------------------------------------

Dodawanie katalogów do ścieżki ładowania sprawia, że są one widziane tak samo jak pliki w głównym katalogu aplikacji - z tą różnicą, że są ładowane tylko raz, więc jeśli chcemy widzieć zmiany to musimy zrestartować serwer. Usuwanie katalogów z 'load_once_paths' natomiast jest widoczne od razu po zapisaniu pliku, bez konieczności restartu - jest to bardzo przydatne podczas pracy nad pluginem.


*vendor/plugins/yaffle/lib/app/models/woodpecker.rb:*

[source, ruby]
----------------------------------------------
class Woodpecker < ActiveRecord::Base
end
----------------------------------------------

Na koniec edytujmy plik 'schema.rb' naszego pluginu:

*vendor/plugins/yaffle/test/schema.rb:*

[source, ruby]
----------------------------------------------
create_table :woodpeckers, :force => true do |t|
  t.string :name
end
----------------------------------------------

W tym momencie nasz test powinien przebiegać poprawnie i powinniśmy być w stanie używać modelu 'Woodpecker' z poziomu naszej aplikacji, a wszystkie dokonane w nim zmiany będą natychmiast widoczne przy pracy w trybie developerskim (development mode).