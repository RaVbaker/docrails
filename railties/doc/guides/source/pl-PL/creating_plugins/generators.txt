== Generatory ==

Wiele pluginów zawiera w sobie generatory. Przypomnijmy sobie, że tworzyliśmy nasz plugin z opcją `\--with-generator`, dzięki czemu mamy już zalążek generatora w 'vendor/plugins/yaffle/generators/yaffle'.

Tworzenie generatorów to temat na osobny przewodnik, dlatego zajmiemy się tylko małym aspektem ich możliwości: generowaniem prostego pliku tekstowego.

=== Testowanie generatorów ===

Wielu programistów nie testuje generatorów w swoich pluginach, a jest to całkiem proste. Typowy test generatora powinien:
 * Tworzyć tymczasowy katalog główny Railsów, który będzie docelowym na potrzeby testu
 * Uruchomić generator
 * Sprawdzić, czy zostały wygenerowane poprawne pliki
 * Usunąć tymczasowy katalog główny

W tej części opiszemy jak stworzyć prosty generator, który dodaje plik. Dla naszego generatora test mógłby wyglądać np. tak:

*vendor/plugins/yaffle/test/definition_generator_test.rb*

[source, ruby]
------------------------------------------------------------------
require File.dirname(__FILE__) + '/test_helper.rb'
require 'rails_generator'
require 'rails_generator/scripts/generate'

class DefinitionGeneratorTest < Test::Unit::TestCase

  def setup
    FileUtils.mkdir_p(fake_rails_root)
    @original_files = file_list
  end

  def teardown
    FileUtils.rm_r(fake_rails_root)
  end
  
  def test_generates_correct_file_name
    Rails::Generator::Scripts::Generate.new.run(["yaffle_definition"], :destination => fake_rails_root)
    new_file = (file_list - @original_files).first
    assert_equal "definition.txt", File.basename(new_file)
  end

  private
  
    def fake_rails_root
      File.join(File.dirname(__FILE__), 'rails_root')
    end
  
    def file_list
      Dir.glob(File.join(fake_rails_root, "*"))
    end
  
end
------------------------------------------------------------------

Próba uruchomienia 'rake' w katalogu pluginu zaowocuje błędem. O ile nie używamy bardziej zaawansowanych poleceń generatora, na ogół wystarczy przetestować skrypt 'Generate' i mieć nadzieję, że Railsy zajmą się poleceniami 'Destroy' i 'Update' za nas.

Aby test wypadł pozytywnie, utwórzmy generator:

*vendor/plugins/yaffle/generators/yaffle_definition/yaffle_definition_generator.rb*

[source, ruby]
------------------------------------------------------------------
class YaffleDefinitionGenerator < Rails::Generator::Base
  def manifest
    record do |m|
      m.file "definition.txt", "definition.txt"
    end
  end
end
------------------------------------------------------------------

=== Plik USAGE ===

Jeśli postanowimy podzielić się naszym pluginem z całym światem, inni programiści będą oczekiwać choćby minimalnej dokumentacji. Możemy ją stworzyć przy użyciu pliku USAGE.

Railsy zawierają kilka wbudowanych generatorów. Aby zobaczyć ich listę, wykonajmy następujące polecenie:

------------------------------------------------------------------
./script/generate
------------------------------------------------------------------

Powinniśmy otrzymać coś w tym stylu:

------------------------------------------------------------------
Installed Generators
  Plugins (vendor/plugins): yaffle_definition
  Builtin: controller, integration_test, mailer, migration, model, observer, plugin, resource, scaffold, session_migration
------------------------------------------------------------------

Po wykonaniu `script/generate yaffle_definition -h` powinniśmy zobaczyć zawartość naszego pliku 'vendor/plugins/yaffle/generators/yaffle_definition/USAGE'.

W naszym pluginie, zawartość pliku USAGE mogłaby wyglądać tak:

------------------------------------------------------------------
Opis:
    Dodaje plik z definicją Dzięcioła do głównego katalogu aplikacji
------------------------------------------------------------------
