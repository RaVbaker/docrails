== Tworzenie migracji ==

=== Tworzenie modelu ===

Generatory modelu i szkieletu utworzą migrację odpowiednią dla tworzonego modelu. Migracja taka zawiera od razu instrukcje potrzebne do utworzenia powiązanej z danym modelem tablicy. Jeśli powiesz Railsom jakie kolumny powinny znaleźć się w tej tabeli, do migracji zostaną dodane odpowiednie formuły. Przykładowo, wykonanie polecenia 

`ruby script/generate model Product name:string description:text` spowoduje stworzenie następującej migracji:

[source, ruby]
-----------------------
class CreateProducts < ActiveRecord::Migration
  def self.up
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end

  def self.down
    drop_table :products
  end
end
-----------------------

Możesz dołączyć tyle par kolumna/typ ile potrzebujesz. Domyślnie zostaną dodane znaczniki czasu `t.timestamps` (które powodują automatyczne utworzenie przez moduł Active Record kolumn `updated_at` i `created_at`).

=== Tworzenie samodzielnej migracji ===

Jeśli tworzysz migracje dla innych celów (np. aby dodać kolumnę do istniejącej już tabeli), możesz skorzystać z generatora migracji:

`ruby script/generate migration AddPartNumberToProducts`

Ta komenda utworzy pustą, lecz odpowiednio nazwaną i skonstruowaną migrację:

[source, ruby]
-----------------------
class AddPartNumberToProducts < ActiveRecord::Migration
  def self.up
  end

  def self.down
  end
end
-----------------------

Jeśli nazwa migracji podana w poleceniu generatora migracje jest formatu AddXXXToYYY lub RemoveXXXFromYYY i po niej wymieniona jest lista kolumn i ich typów, to w wyniku utworzona zostanie migracja z odpowiednimi poleceniami dodania/usunięcia kolumny, przykładowo:

`ruby script/generate migration AddPartNumberToProducts part_number:string`

wygeneruje migrację:

[source, ruby]
-----------------------
class AddPartNumberToProducts < ActiveRecord::Migration
  def self.up
    add_column :products, :part_number, :string
  end

  def self.down
    remove_column :products, :part_number
  end
end
-----------------------

Analogicznie, komenda

`ruby script/generate migration RemovePartNumberFromProducts part_number:string`

generuje

[source, ruby]
-----------------------
class RemovePartNumberFromProducts < ActiveRecord::Migration
  def self.up
    remove_column :products, :part_number
  end

  def self.down
    add_column :products, :part_number, :string
  end
end
-----------------------

Przy tworzeniu migracji nie musisz ograniczać się do jednej kolumny, na przykład:

`ruby script/generate migration AddDetailsToProducts part_number:string price:decimal`

wygeneruje migrację:

[source, ruby]
-----------------------
class AddDetailsToProducts < ActiveRecord::Migration
  def self.up
    add_column :products, :part_number, :string
    add_column :products, :price, :decimal
  end

  def self.down
    remove_column :products, :price
    remove_column :products, :part_number
  end
end
-----------------------

Jak zwykle, wygenerowana migracja jest dopiero punktem startowym Twojej pracy. Możesz ją dalej modyfikować, dodając lub usuwając elementy.
