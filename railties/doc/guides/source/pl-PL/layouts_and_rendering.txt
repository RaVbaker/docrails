Layouty i Renderowanie w Rails
==============================

Ten przewodnik opisuje podstawowe możliwości layoutów w modułach Action Controller i Action View. Po jego przeczytaniu powinieneś umieć:

* Używać różnorodnych metod renderujących wbudowanych w Rails
* Tworzyć layouty podzielone na wiele sekcji
* Używać podszablonów (ang. partials) by zastosować regułę DRY do swoich widoków
* Używać zagnieżdżonych szablonów (sub-szablony ang. nested layouts, sub-templates)

== Opis zawartości: Jak wszystko razem współgra

Ten poradnik skupia się na wzajemnym oddziaływaniu pomiędzy Kontrolerem a Widokiem we wzorcu Model-View-Controller (MVC). Jak wiesz, Kontroler jest odpowiedzialny za nadzorowanie całego procesu obsługi zapytań w Rails, pomimo że zazwyczaj przekazuje on każdy większy kod do Modelu. Natomiast gdy dojdzie do wysłania odpowiedzi użytkownikowi, Kontroler przekazuje to zadanie Widokowi. Tematem tego tutoriala jest właśnie to przekazywanie.

Ogólnie mówiąc to nadzorowanie wymaga zadecydowania, co powinno być przesłane jako odpowiedź, a następnie wywołania odpowiedniej metody w celu jej stworzenia. Jeśli odpowiedź jest rozwiniętym, skomplikowanym widokiem, Rails wykonuje dodatkową pracę by opakować widok w layout i ewentualnie dołączyć częściowe widoki. Te wszystkie możliwości zobaczysz w późniejszej części poradnika.

== Tworzenie odpowiedzi

Z punktu widzenia kontrolera, są trzy drogi, aby stworzyć odpowiedź HTTP:

* Wywołać +render+ by stworzyć pełną odpowiedź do odesłania przeglądarce
* Wywołać +redirect_to+ by wysłać kod HTTP informujący o przekierowaniu do przeglądarki
* Wywołać +head+ by stworzyć odpowiedź zawierającą tylko nagłówki HTTP i odesłać ją do przeglądarki

Wytłumaczę po kolei każdą z tych metod, ale najpierw kilka słów o najprostszej rzeczy, którą może wykonać kontroler w odpowiedzi na żądanie – nie robić nic :)

=== Domyślne renderowanie: strategia Convention Over Configuration w akcji

Słyszałeś zapewne, że Rails promuje strategię „convention over configuration”. Domyślny rendering jest wspaniałym tego przykładem. Standardowo, kontrolery w Rails automatycznie renderują widoki z nazwami odpowiadającymi akcjom. Na przykład, jeśli masz poniższy kod w klasie +BooksController+:

[source, ruby]
-------------------------------------------------------
def show
  @book = Book.find(params[:id])
end
-------------------------------------------------------

Rails automatycznie po wykonaniu metody wyrenderuje plik +app/views/books/show.html.erb+. Właściwie, jeśli masz domyślną regułę (route) catch-all w odpowiednim miejscu (+map.connect \':controller/:action/:id'+), Rails wyrenderuje nawet widoki, które nie mają żadnego kodu w kontrolerze. Na przykład, jeśli masz ustawioną domyślną regułę i nadejdzie żądanie dla +/books/sale_list+, Rails w odpowiedzi wyrenderuje +app/views/books/sale_list.html.erb+.

NOTE: Właściwe renderowanie jest wykonywane przez podklasę +ActionView::TemplateHandlers+. Ten tutorial nie zagłębia się w ten proces, ale należy pamiętać, że rozszerzenie pliku twojego widoku wpływa na wybór szablonu obsługi. W Rails 2, standardowymi rozszerzeniami są +.erb+dla ERB (HTML z osadzonym Rubim), +.rjs+dla RJS (JavaScript z Rubim) i +.builder+ dla Buildera (generator XML). Dodatkowo znajdziesz również pliki +.rhtml+ używane dla szablonów ERB i +.rxml+ dla szablonów Buildera, jednak obecnie te rozszerzenia są niezalecane i będą usuniętę w przyszłych wersjach Rails.

=== Używanie +render+

W większości przypadków, metoda +ActionController::Base#render+ wykonuje dużą część renderowania twojej aplikacji do użytku przeglądarki. Jest wiele dróg dostosowania zachowania funkcji +render+. Możesz wyrenderować domyślny widok dla szablonu Rails, lub specyficznego szablonu, lub pliku, lub wewnętrznego kodu lub dla niczego w ogóle. Możesz renderować tekst, JSON lub XML. Możesz również ustalić typ zawartości lub stanu HTTP wyrenderowanej odpowiedzi.

TIP: Jeśli chcesz zobaczyć dokładny wynik wywołania +render+ bez potrzeby sprawdzania tego w przeglądarce, możesz wywołać +render_to_string+. Ta metoda ma dokładnie takie same opcje jak +render+, ale zwraca string zamiast wysyłać odpowiedzi bezpośrednio do przeglądarki.

==== Renderowanie niczego

Prawdopodobnie najprostszą rzeczą jaką możemy zrobić z +render+ jest wyrenderowanie niczego.

[source, ruby]
-------------------------------------------------------
render :nothing => true
-------------------------------------------------------

To wyśle pustą odpowiedź do przeglądarki (jakkolwiek, będzie ona zawierała nagłówki statusu które ustawisz za pomocą opcji :status, omówionej poniżej).

TIP: Będziesz prawdopodobnie chciał używać metody +head+, omówionej poniżej, zamiast +render:nothing+. Umożliwia to dodatkową elastyczność i zaznacza, że generujesz tylko i wyłącznie nagłówki HTTP.

==== Renderowanie widoku akcji

Jeśli chcesz wyrenderować widok odnoszący się do innej akcji w ramach tego samego szablonu, możesz użyć funkcji +render+ razem z nazwą widoku:

[source, ruby]
-------------------------------------------------------
def update
  @book = Book.find(params[:id])
    if @book.update_attributes(params[:book])
      redirect_to(@book)
    else
      render "edit"
    end
  end
end
-------------------------------------------------------
Jeśli wywołanie +update_attributes+ się nie powiedzie, wywołanie akcji +update+ w kontrolerze wyrenderuje szablon +edit.html.erb+ należący do tego samego kontrolera.

Jeśli wolisz, możesz używasz symbolu zamiast stringu by określić akcję do wyrenderowania.

[source, ruby]
-------------------------------------------------------
def update
  @book = Book.find(params[:id])
    if @book.update_attributes(params[:book])
      redirect_to(@book)
    else
      render :edit
    end
  end
end
-------------------------------------------------------

Uściślając, możesz użyć +render+ z opcją +:action +(chociaż nie jest to już konieczne od Rails 2.3):

[source, ruby]
-------------------------------------------------------
def update
  @book = Book.find(params[:id])
    if @book.update_attributes(params[:book])
      redirect_to(@book)
    else
      render :action => "edit"
    end
  end
end
-------------------------------------------------------

WARNING: Używanie +render+ z +:action+ jest częstym źródłem nieporozumień dla początkujących programistów. Wybrana akcja jest używana do określenia który widok należy wyrenderować, ale Rails nie wykonuje żadnego kodu dla tej akcji w kontrolerze. Wszystkie zmienne z których będziesz korzystać w widoku muszą być ustawione w aktualnej akcji przed wywołaniem +render+.

==== Renderowanie szablonu akcji z innego kontrolera

Co zrobić jeśli chcesz wyrenderować szablon z zupełnie innego kontrolera z tego, który zawiera kod akcji? Możesz to zrobić za pomocą +render+, które pobiera całą ścieżkę (relatywną do +app/views/+) kontrolera do wyrenderowania. Dla przykładu, jeśli uruchamiasz kod w +AdminProductsController+, który znajduje się w +app/controllers/admin+, możesz wyrenderować wynik akcji do szablonu +app/views/products+ w ten sposób:

[source, ruby]
-------------------------------------------------------
render 'products/show'
-------------------------------------------------------

Rails wie, że widok ten należy do innego kontrolera dzięki wbudowanemu slashowi w ciąg znaków.  Jeśli chcesz to dodatkowo zaznaczyć w kodzie, możesz użyć opcji +:template+ (która była wymagana w Rails 2.2 i wcześniejszych):

[source, ruby]
-------------------------------------------------------
render :template => 'products/show'
-------------------------------------------------------

==== Renderowanie dowolnego pliku

Metoda +render+ może również korzystać z widoku, który znajduje się zupełnie poza aplikacją (gdy prawdopodobnie dzielisz widoki między dwoma aplikacjami):

[source, ruby]
-------------------------------------------------------
render "/u/apps/warehouse_app/current/app/views/products/show"
-------------------------------------------------------

Rails stwierdzi, że jest to renderowanie pliku dzięki slashowi na początku stringu. Chcąc to dodatkowo zaznaczyć, możesz użyć opcji +:file+ (która była wymagana w Rails 2.2 i wcześniejszych wersjach):

[source, ruby]
-------------------------------------------------------
render :file => "/u/apps/warehouse_app/current/app/views/products/show"
-------------------------------------------------------

Opcja +:file+ pobiera bezwzględną ścieżkę w systemie plików. Oczywiście, musisz mieć odpowiednie prawa do widoku, którego używasz do wyrenderowania zawartości.

NOTE: Domyślnie ten plik jest renderowany bez użycia aktualnego layoutu. Jeśli chcesz by Rails zastosowało aktualny layout musisz dodać opcję +layout=>true+.

TIP: Jeśli korzystasz z systemu Microsoft Windows, powinieneś używać opcji +:file+ do renderowania pliku, ponieważ nazwy plików w Windowsie nie mają tego samego formatu jak w Unixie.

==== Używanie +render+ z +:inline+

Metoda +render+ może obyć się bez jakiegokolwiek widoku, jeśli tylko użyjesz opcji +:inline+ by wspomóc ERB jako części wywołania metody. Jest to całkowicie poprawne:

[source, ruby]
-------------------------------------------------------
render :inline => "<% products.each do |p| %><p><%= p.name %><p><% end %>"
-------------------------------------------------------

WARNING: Rzadko jednak istnieje dobry powód by użyć tej opcji. Mieszanie ERB wewnątrz twoich kontrolerów niszczy zorientowanie Rails na MVC i powoduje, że innym developerom jest trudniej podążać za tokiem twojego myślenia. Zamiast tego lepiej używaj oddzielnych widoków erb.

Domyślnie, renderowanie inline używa ERB. Możesz zmusić je by użyło zamiast tego Buildera, za pomocą opcji +:type+:

[source, ruby]
-------------------------------------------------------
render :inline => "xml.p {'Horrid coding practice!'}", :type => :builder
-------------------------------------------------------

==== Używanie +render+ z +:update+

Możesz również renderować uaktualnienia stron oparte o javascript  inline używając opcji +:update+ w +render+:

[source, ruby]
-------------------------------------------------------
render :update do |page|
  page.replace_html 'warning', "Invalid options supplied"
end
-------------------------------------------------------

WARNING: Umieszczanie javascriptowych uaktualnień w twoim kontrolerze może zdawać się upraszczać małe aktualizacje, ale niszczy orientację MVC Rails i powoduje, że trudniej jest innym zrozumieć twój kod. Proponuję używać zamiast tego oddzielnych szablonów rjs, nie ważne jak mała nie byłaby dana aktualizacja.

==== Renderowanie tekstu

Możesz wysyłać zwykły tekst – bez jakichkolwiek znaczników – z powrotem do przeglądarki za pomocą opcji +:text+:

[source, ruby]
-------------------------------------------------------
render :text => "OK"
-------------------------------------------------------

TIP: Rendering zwykłego tekstu jest najbardziej użyteczne kiedy odpowiadasz na AJAX-owe zapytania, które spodziewają się czegoś więcej niż tylko kodu HTML.

NOTE: Domyślnie, jeśli korzystasz z opcji +:text+, plik zostanie wyrenderowany bez użycia aktualnego layoutu. Jeśli chcesz by Rails umieściło text wewnątrz aktualnego layoutu, musisz skorzystać z opcji +:layout=>true+.

==== Renderowanie JSON

JSON jest formatem danych javascript wykorzystywanym przez wiele bibliotek AJAX. Rails ma wbudowaną obsługę konwersji obiektów do JSON i renderowania go później z powrotem do przeglądarki:

[source, ruby]
-------------------------------------------------------
render :json => @product
-------------------------------------------------------

TIP: Nie musisz wywoływać funkcji +to_json+ na obiekcie który chcesz wyrenderować. Jeśli użyjesz opcji +:json, render+ automatycznie wywoła to +to_json+ za ciebie.

==== Renderowanie XML

Rails ma także wbudowaną obsługę konwersji obiektów XML i renderowania ich z powrotem do obiektu wywołującego:

[source, ruby]
-------------------------------------------------------
render :xml => @product
-------------------------------------------------------

TIP: Nie musisz wywoływać funkcji +to_xml+ na obiekcie który chcesz wyrenderować. Jeśli użyjesz opcji +:xml+, +render+ automatycznie wywoła +to_xml+ za ciebie.

==== Renderowanie Vanilla JavaScript

Rails może renderować vanilla JavaScript (jako alternatywę do używania +update+ z plikiem +.rjs+):

[source, ruby]
-------------------------------------------------------
render :js => "alert('Hello Rails');"
-------------------------------------------------------

Będzie to wysyłać pobrany ciąg do przeglądarki z typem MIME +text/javascript+.

==== Opcje dla +render+

Wywołanie metody +render+ generalnie akceptuje cztery opcje:

* +:content_type+
* +:layout+
* +:status+
* +:location+

===== The +:content_type+ Option

Domyślnie Rails dostarczy wynik operacji renderowania z typem zawartości MIME +text/html+ (lub +application/json+ jeśli używasz opcji +:json+ lub +application/xm+l dla opcji +:xml+). Możliwe, że będziesz chciał to zmienić i możesz to zrobić  poprzez ustawienie opcji +:content_type+:

[source, ruby]
-------------------------------------------------------
render :file => filename, :content_type => 'application/rss'
-------------------------------------------------------

===== Opcja +:layout+

W większości opcji renderowania, renderowana zawartość jest wyświetlana jako część aktualnego layoutu. Poznasz dokładniej layouty i jak z nich korzystać w dalszej części tego przewodnika.

Możesz użyć opcji +:layout+ by zakomunikować Rails by użyło określonego pliku jako layout dla bieżącej akcji.

[source, ruby]
-------------------------------------------------------
render :layout => 'special_layout'
-------------------------------------------------------

Możesz również powiedzieć Rails by renderować bez jakiegokolwiek layoutu:

[source, ruby]
-------------------------------------------------------
render :layout => false
-------------------------------------------------------

===== Opcja +:status+

Rails może automatycznie generować odpowiedzi z poprawnym kodem HTML (w większości przypadków +200 OK+). Aby to zmienić możesz użyć opcji +:status+:

[source, ruby]
-------------------------------------------------------
render :status => 500
render :status => :forbidden
-------------------------------------------------------

Rails rozumie zarówno liczbowe kody stanu jak i odpowiadające im symbole. Listę kodów stanu możesz znaleźć w +actionpack/lib/action_controller/status_codes.rb+. Możesz również zobaczyć tam jak mapowane są symbole na kody stanu.

===== Opcja +:location+

Możesz używać opcji :location by ustawić nagłówek HTTP +Location+:

[source, ruby]
-------------------------------------------------------
render :xml => photo, :location => photo_url(photo)
-------------------------------------------------------

==== Znajdowanie Layoutów

Aby znaleźć bieżący layout, Rails najpierw szuka pliku w +app/views/layouts+ z taką samą nazwą bazową jak kontroler. Na przykład, renderowanie akcji z klasy +PhotosController+ użyje +/app/views/layouts/photos.html.erb+. Jeśli nie ma specyficznego layoutu dla danego kontrolera Rails użyje +/app/views/layouts/application.html.erb+. Jeśli nie ma layoutu +.erb+, Rails użyje layoutu +.builder+ jeśli taki istnieje. Rails również dostarcza kilka sposobów na bardziej precyzyjne przypisanie konkretnego layoutu do poszczególnych kontrolerów i akcji.

===== Określenie layoutów na poziomie kontrolera

Możesz nadpisać konwencje automatycznych layoutów w swoim kontrolerze za pomocą deklaracji +layout+. Na przykład:

[source, ruby]
-------------------------------------------------------
class ProductsController < ApplicationController
  layout "inventory"
  #...
end
-------------------------------------------------------

Z tą deklaracją, wszystkie metody w +ProductsController+ będą korzystać z +app/views/layouts/inventory.html.erb+ dla ich layoutu.

Aby przypisać konkretny layout dla całej aplikacji, użyj deklaracji w swojej klasie +ApplicationController+:

[source, ruby]
-------------------------------------------------------
class ApplicationController < ActionController::Base
  layout "main"
  #...
end
-------------------------------------------------------

Z tą deklaracją, wszystkie widoki w całej aplikacji będą korzystać z +app/views/layouts/main.html.erb+ dla ich layoutów.

===== Wybór layoutu w czasie wykonania

Możesz użyć symbolu dla odroczenia wyboru layoutu aż do czasu w którym przetwarzane jest zapytanie:

[source, ruby]
-------------------------------------------------------
class ProductsController < ApplicationController
  layout :products_layout
  
  def show
    @product = Product.find(params[:id])
  end

  private
    def products_layout
      @current_user.special? ? "special" : "products"
    end

end
-------------------------------------------------------

Teraz, jeśli bieżący użytkownik jest użytkownikiem specjalnym, to otrzyma specjalny layout podczas przeglądania produktów. Możesz nawet użyć metody inline do wyboru layoutu:

[source, ruby]
-------------------------------------------------------
class ProductsController < ApplicationController
  layout proc{ |controller| controller.
  # ...	
end
-------------------------------------------------------

===== Warunkowe layouty

Layouty określone w kontrolerze obsługują opcje +:only+ i +:except+, które pobierają albo pojedynczą nazwę metody albo tablicę nazw:

-------------------------------------------------------
class ProductsController < ApplicationController
  layout "inventory", :only => :index
  layout "product", :except => [:index, :rss]
  #...
end
-------------------------------------------------------

Z tymi deklaracjami, layout +inventory+ byłby wykorzystywany tylko do metody +index+, layout +product+ byłby wykorzystywany do wszystkiego oprócz metody +rss+, a metoda +rss+ będzie mieć określony layout poprzez zasady automatycznego layoutu.

===== Dziedziczenie layoutów

Layouty są dzielone w dół hierarchii zaś bardziej konkretne layouty zawsze zasłaniają te bardziej ogólne. Na przykład:

+application_controller.rb+:

[source, ruby]
-------------------------------------------------------
class ApplicationController < ActionController::Base
  layout "main"
  #...
end
-------------------------------------------------------

+posts_controller.rb+:

[source, ruby]
-------------------------------------------------------
class PostsController < ApplicationController
  # ...
end
-------------------------------------------------------

+special_posts_controller.rb+:

[source, ruby]
-------------------------------------------------------
class SpecialPostsController < PostsController
  layout "special"
  # ...
end
-------------------------------------------------------

+old_posts_controller.rb+:

[source, ruby]
-------------------------------------------------------
class OldPostsController < SpecialPostsController
  layout nil

  def show
    @post = Post.find(params[:id])
  end

  def index
    @old_posts = Post.older
    render :layout => "old"
  end
  # ...
end
-------------------------------------------------------

W tej aplikacji:

* Domyślnie, widoki będą renderowane z wykorzystaniem layoutu +main+
* +PostController#index+ będzie używać layoutu +main+
* +SpecialPostController#index+ będzie używał layoutu +special+
* +01dPostsController#show+ nie będzie używał żadnego layoutu
* +01dPostsController#index+ będzie używał layoutu +old+

==== Unikanie błędów podwójnego renderowania

Prędzej czy później, większość programistów Rails zobaczy komunikat o błędzie „Can only render od redirect once per action”. Chociaż jest to irytujące, jest to stosunkowo łatwe do naprawienia. Zwykle dzieje się to z powodu niezrozumienia podstaw działania metody +render+.

Na przykład, oto fragment kodu, który powoduje ten błąd:

[source, ruby]
-------------------------------------------------------
def show
  @book = Book.find(params[:id])
  if @book.special?
    render :action => "special_show"
  end
end
-------------------------------------------------------

Jeśli +@book.special?+ ewaluuje do +true+, Rails rozpocznie proces renderowania by zrzutować zmienną +@book+ w widoku +special_show+. Ale to _nie_ zatrzyma reszty kodu w akcji +show+ przed wykonaniem i jeśli Rails dojdzie do końca akcji zacznie renderować widok +show+ i wyrzuci błąd. Rozwiązanie jest proste: upewnij się, że masz tylko jedno wywołanie +render+ lub +redirect+ w jednej części kodu. Jedną z rzeczy które mogą pomóc jest +and return+. Oto poprawiona wersja metody:

[source, ruby]
-------------------------------------------------------
def show
  @book = Book.find(params[:id])
  if @book.special?
    render :action => "special_show" and return
  end
end
-------------------------------------------------------

=== Using +redirect_to+

Another way to handle returning responses to a HTTP request is with +redirect_to+. As you've seen, +render+ tells Rails which view (or other asset) to use in constructing a response. The +redirect_to+ method does something completely different: it tells the browser to send a new request for a different URL. For example, you could redirect from wherever you are in your code to the index of photos in your application with this call:

[source, ruby]
-------------------------------------------------------
redirect_to photos_path
-------------------------------------------------------

You can use +redirect_to+ with any arguments that you could use with +link_to+ or +url_for+. In addition, there's a special redirect that sends the user back to the page they just came from:

-------------------------------------------------------
redirect_to :back
-------------------------------------------------------

==== Getting a Different Redirect Status Code

Rails uses HTTP status code 302 (permanent redirect) when you call +redirect_to+. If you'd like to use a different status code (perhaps 301, temporary redirect), you can do so by using the +:status+ option:

-------------------------------------------------------
redirect_to photos_path, :status => 301
-------------------------------------------------------

Just like the +:status+ option for +render+, +:status+ for +redirect_to+ accepts both numeric and symbolic header designations.

==== The Difference Between +render+ and +redirect+

Sometimes inexperienced developers conceive of +redirect_to+ as a sort of +goto+ command, moving execution from one place to another in your Rails code. This is _not_ correct. Your code stops running and waits for a new request for the browser. It just happens that you've told the browser what request it should make next, by sending back a HTTP 302 status code.

Consider these actions to see the difference:

[source, ruby]
-------------------------------------------------------
def index
  @books = Book.find(:all)
end

def show
  @book = Book.find(params[:id])
  if @book.nil?
    render :action => "index" and return
  end
end
-------------------------------------------------------

With the code in this form, there will be likely be a problem if the +@book+ variable is +nil+. Remember, a +render :action+ doesn't run any code in the target action, so nothing will set up the +@books+ variable that the +index+ view is presumably depending on. One way to fix this is to redirect instead of rendering:

[source, ruby]
-------------------------------------------------------
def index
  @books = Book.find(:all)
end

def show
  @book = Book.find(params[:id])
  if @book.nil?
    redirect_to :action => "index" and return
  end
end
-------------------------------------------------------

With this code, the browser will make a fresh request for the index page, the code in the +index+ method will run, and all will be well.

=== Using +head+ To Build Header-Only Responses

The +head+ method exists to let you send back responses to the browser that have only headers. It provides a more obvious alternative to calling +render :nothing+. The +head+ method takes one response, which is interpreted as a hash of header names and values. For example, you can return only an error header:

[source, ruby]
-------------------------------------------------------
head :bad_request
-------------------------------------------------------

Or you can use other HTTP headers to convey additional information:

[source, ruby]
-------------------------------------------------------
head :created, :location => photo_path(@photo)
-------------------------------------------------------

== Structuring Layouts

When Rails renders a view as a response, it does so by combining the view with the current layout (using the rules for finding the current layout that were covered earlier in this guide). Within a layout, you have access to three tools for combining different bits of output to form the overall response:

* Asset tags
* +yield+ and +content_for+
* Partials

I'll discuss each of these in turn.

=== Asset Tags

Asset tags provide methods for generating HTML that links views to assets like images, javascript, stylesheets, and feeds. There are four types of include tag:

* auto_discovery_link_tag
* javascript_include_tag
* stylesheet_link_tag
* image_tag

You can use these tags in layouts or other views, although the tags other than +image_tag+ are most commonly used in the +<head>+ section of a layout.

WARNING: The asset tags do _not_ verify the existence of the assets at the specified locations; they simply assume that you know what you're doing and generate the link.

==== Linking to Feeds with +auto_discovery_link_tag+

The +auto_discovery_link_tag helper builds HTML that most browsers and newsreaders can use to detect the presences of RSS or ATOM feeds. It takes the type of the link (+:rss+ or +:atom+), a hash of options that are passed through to url_for, and a hash of options for the tag:

[source, ruby]
-------------------------------------------------------
<%= auto_discovery_link_tag(:rss, {:action => "feed"}, {:title => "RSS Feed"}) %>
-------------------------------------------------------

There are three tag options available for +auto_discovery_link_tag+:

* +:rel+ specifies the +rel+ value in the link (defaults to "alternate")
* +:type+ specifies an explicit MIME type. Rails will generate an appropriate MIME type automatically
* +:title+ specifies the title of the link

==== Linking to Javascript Files with +javascript_include_tag+

The +javascript_include_tag+ helper returns an HTML +<script>+ tag for each source provided. Rails looks in +public/javascripts+ for these files by default, but you can specify a full path relative to the document root, or a URL, if you prefer. For example, to include +public/javascripts/main.js+:
	
[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag "main" %>
-------------------------------------------------------

To include +public/javascripts/main.js+ and +public/javascripts/columns.js+:

[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag "main", "columns" %>
-------------------------------------------------------

To include +public/javascripts/main.js+ and +public/photos/columns.js+:

[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag "main", "/photos/columns" %>
-------------------------------------------------------

To include +http://example.com/main.js+:

[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag "http://example.com/main.js" %>
-------------------------------------------------------

The +defaults+ option loads the Prototype and Scriptaculous libraries:

[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag :defaults %>
-------------------------------------------------------

The +all+ option loads every javascript file in +public/javascripts+, starting with the Prototype and Scriptaculous libraries:

[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag :all %>
-------------------------------------------------------

You can supply the +:recursive+ option to load files in subfolders of +public/javascripts+ as well:

[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag :all, :recursive => true %>
-------------------------------------------------------

If you're loading multiple javascript files, you can create a better user experience by combining multiple files into a single download. To make this happen in production, specify +:cache => true+ in your +javascript_include_tag+:

[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag "main", "columns", :cache => true %>
-------------------------------------------------------

By default, the combined file will be delivered as +javascripts/all.js+. You can specify a location for the cached asset file instead:

[source, ruby]
-------------------------------------------------------
<%= javascript_include_tag "main", "columns", :cache => 'cache/main/display' %>
-------------------------------------------------------

You can even use dynamic paths such as "cache/#{current_site}/main/display"+.
	
==== Linking to CSS Files with +stylesheet_link_tag+

The +stylesheet_link_tag+ helper returns an HTML +<link>+ tag for each source provided. Rails looks in +public/stylesheets+ for these files by default, but you can specify a full path relative to the document root, or a URL, if you prefer. For example, to include +public/stylesheets/main.cs+:
	
[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag "main" %>
-------------------------------------------------------

To include +public/stylesheets/main.css+ and +public/stylesheets/columns.css+:

[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag "main", "columns" %>
-------------------------------------------------------

To include +public/stylesheets/main.css+ and +public/photos/columns.css+:

[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag "main", "/photos/columns" %>
-------------------------------------------------------

To include +http://example.com/main.cs+:

[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag "http://example.com/main.cs" %>
-------------------------------------------------------

By default, +stylesheet_link_tag+ creates links with +media="screen" rel="stylesheet" type="text/css"+. You can override any of these defaults by specifying an appropriate option (:media, :rel, or :type):

[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag "main_print", media => "print" %>
-------------------------------------------------------

The +all+ option links every CSS file in +public/stylesheets+:

[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag :all %>
-------------------------------------------------------

You can supply the +:recursive+ option to link files in subfolders of +public/stylesheets+ as well:

[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag :all, :recursive => true %>
-------------------------------------------------------

If you're loading multiple CSS files, you can create a better user experience by combining multiple files into a single download. To make this happen in production, specify +:cache => true+ in your +stylesheet_link_tag+:

[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag "main", "columns", :cache => true %>
-------------------------------------------------------
	
By default, the combined file will be delivered as +stylesheets/all.css+. You can specify a location for the cached asset file instead:

[source, ruby]
-------------------------------------------------------
<%= stylesheet_link_tag "main", "columns", :cache => 'cache/main/display' %>
-------------------------------------------------------

You can even use dynamic paths such as "cache/#{current_site}/main/display"+.
	
==== Linking to Images with +image_tag+

The +image_tag+ helper builds an HTML +<image>+ tag to the specified file. By default, files are loaded from +public/images+. If you don't specify an extension, .png is assumed by default:

[source, ruby]
-------------------------------------------------------
<%= image_tag "header" %>
-------------------------------------------------------

You can supply a path to the image if you like:
	
[source, ruby]
-------------------------------------------------------
<%= image_tag "icons/delete.gif" %>
-------------------------------------------------------

You can supply a hash of additional HTML options:
	
[source, ruby]
-------------------------------------------------------
<%= image_tag "icons/delete.gif", :height => 45 %>
-------------------------------------------------------

There are also three special options you can use with +image_tag+:

* +:alt+ specifies the alt text for the image (which defaults to the file name of the file, capitalized and with no extension)
* +:size+ specifies both width and height, in the format "{width}x{height}" (for example, "150x125")
* +:mouseover+ sets an alternate image to be used when the onmouseover event is fired.

=== Understanding +yield+

Within the context of a layout, +yield+ identifies a section where content from the view should be inserted. The simplest way to use this is to have a single +yield+, into which the entire contents of the view currently being rendered is inserted:

[source, html]
-------------------------------------------------------
<html>
  <head>
  </head>
  <body>
	<%= yield %>
  <hbody>
</html>
-------------------------------------------------------

You can also create a layout with multiple yielding regions:

[source, html]
-------------------------------------------------------
<html>
  <head>
	<%= yield :head %>
  </head>
  <body>
	<%= yield %>
  <hbody>
</html>
-------------------------------------------------------

The main body of the view will always render into the unnamed +yield+. To render content into a named +yield+, you use the +content_for+ method.

=== Using +content_for+

The +content_for+ method allows you to insert content into a +yield+ block in your layout. You only use +content_for+ to insert content in named yields. For example, this view would work with the layout that you just saw:

[source, html]
-------------------------------------------------------
<% content_for :head do %>
  <title>A simple page</title>
<% end %>

<p>Hello, Rails!</p>
-------------------------------------------------------

The result of rendering this page into the supplied layout would be this HTML:

[source, html]
-------------------------------------------------------
<html>
  <head>
	<title>A simple page</title>
  </head>
  <body>
	<p>Hello, Rails!</p>
  <hbody>
</html>
-------------------------------------------------------

The +content_for+ method is very helpful when your layout contains distinct regions such as sidebars and footers that should get their own blocks of content inserted. It's also useful for inserting tags that load page-specific javascript or css files into the header of an otherwise-generic layout.

=== Using Partials

Partial templates - usually just called "partials" - are another device for breaking apart the rendering process into more manageable chunks. With a partial, you can move the code for rendering a particular piece of a response to its own file. 

==== Naming Partials

To render a partial as part of a view, you use the +render+ method within the view, and include the +:partial+ option:

[source, ruby]
-------------------------------------------------------
<%= render :partial => "menu" %>
-------------------------------------------------------

This will render a file named +_menu.html.erb+ at that point within the view being rendered. Note the leading underscore character: partials are named with a leading underscore to distinguish them from regular views, even though they are referred to without the underscore. This holds true even when you're pulling in a partial from another folder:

[source, ruby]
-------------------------------------------------------
<%= render :partial => "shared/menu" %>
-------------------------------------------------------

That code will pull in the partial from +app/views/shared/_menu.html.erb+.

==== Using Partials to Simplify Views

One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that you can grasp what's going on more easily. For example, you might have a view that looked like this:

[source, html]
-------------------------------------------------------
<%= render :partial => "shared/ad_banner" %>

<h1>Products</h1>

<p>Here are a few of our fine products:</p>
...

<%= render :partial => "shared/footer" %>
-------------------------------------------------------

Here, the +_ad_banner.html.erb+ and +_footer.html.erb+ partials could contain content that is shared among many pages in your application. You don't need to see the details of these sections when you're concentrating on a particular page.

TIP: For content that is shared among all pages in your application, you can use partials directly from layouts.

==== Partial Layouts

A partial can use its own layout file, just as a view can use a layout. For example, you might call a partial like this:

[source, html]
-------------------------------------------------------
<%= render :partial => "link_area", :layout => "graybar" %>
-------------------------------------------------------

This would look for a partial named +_link_area.html.erb+ and render it using the layout +_graybar.html.erb+. Note that layouts for partials follow the same leading-underscore naming as regular partials, and are placed in the same folder with the partial that they belong to (not in the master +layouts+ folder).

==== Passing Local Variables

You can also pass local variables into partials, making them even more powerful and flexible. For example, you can use this technique to reduce duplication between new and edit pages, while still keeping a bit of distinct content:

+new.html.erb+:

[source, html]
-------------------------------------------------------
<h1>New zone</h1>
<%= error_messages_for :zone %>
<%= render :partial => "form", :locals => { :button_label => "Create zone", :zone => @zone } %>
-------------------------------------------------------

+edit.html.erb+:

[source, html]
-------------------------------------------------------
<h1>Editing zone</h1>
<%= error_messages_for :zone %>
<%= render :partial => "form", :locals => { :button_label => "Update zone", :zone => @zone } %>
-------------------------------------------------------

+_form.html.erb:+

[source, html]
-------------------------------------------------------
<% form_for(zone) do |f| %>
	<p>
	  <b>Zone name</b><br />
	  <%= f.text_field :name %>
	</p>
  <p>
    <%= f.submit button_label %>
  </p>
<% end %>
-------------------------------------------------------

Although the same partial will be rendered into both views, the label on the submit button is controlled by a local variable passed into the partial.

Every partial also has a local variable with the same name as the partial (minus the underscore). You can pass an object in to this local variable via the +:object+ option:

[source, html]
-------------------------------------------------------
<%= render :partial => "customer", :object => @new_customer %>
-------------------------------------------------------

Within the +customer+ partial, the +@customer+ variable will refer to +@new_customer+ from the parent view.

WARNING: In previous versions of Rails, the default local variable would look for an instance variable with the same name as the partial in the parent. This behavior is deprecated in Rails 2.2 and will be removed in a future version.

If you have an instance of a model to render into a partial, you can use a shorthand syntax:

[source, html]
-------------------------------------------------------
<%= render :partial => @customer %>
-------------------------------------------------------

Assuming that the +@customer+ instance variable contains an instance of the +Customer+ model, this will use +_customer.html.erb+ to render it.

==== Rendering Collections 

Partials are very useful in rendering collections. When you pass a collection to a partial via the +:collection+ option, the partial will be inserted once for each member in the collection:

+index.html.erb+:

[source, html]
-------------------------------------------------------
<h1>Products</h1>
<%= render :partial => "product", :collection => @products %>
-------------------------------------------------------

+_product.html.erb+:

[source, html]
-------------------------------------------------------
<p>Product Name: <%= product.name %></p>
-------------------------------------------------------

When a partial is called with a pluralized collection, then the individual instances of the partial have access to the member of the collection being rendered via a variable named after the partial. In this case, the partial is +_product, and within the +_product+ partial, you can refer to +product+ to get the instance that is being rendered. To use a custom local variable name within the partial, specify the +:as+ option in the call to the partial:

[source, html]
-------------------------------------------------------
<%= render :partial => "product", :collection => @products, :as => :item %>
-------------------------------------------------------

With this change, you can access an instance of the +@products+ collection as the +item+ local variable within the partial.

TIP: Rails also makes a counter variable available within a partial called by the collection, named after the member of the collection followed by +_counter+. For example, if you're rendering +@products+, within the partial you can refer to +product_counter+ to tell you how many times the partial has been rendered.

You can also specify a second partial to be rendered between instances of the main partial by using the +:spacer_template+ option:

[source, html]
-------------------------------------------------------
<%= render :partial => "product", :collection => @products, :spacer_template => "product_ruler" %>
-------------------------------------------------------

Rails will render the +_product_ruler+ partial (with no data passed in to it) between each pair of +_product+ partials.

There's also a shorthand syntax available for rendering collections. For example, if +@products+ is a collection of products, you can render the collection this way:

+index.html.erb+:

[source, html]
-------------------------------------------------------
<h1>Products</h1>
<%= render :partial => @products %>
-------------------------------------------------------

+_product.html.erb+:

[source, html]
-------------------------------------------------------
<p>Product Name: <%= product.name %></p>
-------------------------------------------------------

Rails determines the name of the partial to use by looking at the model name in the collection. In fact, you can even create a heterogeneous collection and render it this way, and Rails will choose the proper partial for each member of the collection:

+index.html.erb+:

[source, html]
-------------------------------------------------------
<h1>Contacts</h1>
<%= render :partial => [customer1, employee1, customer2, employee2] %>
-------------------------------------------------------

+_customer.html.erb+:

[source, html]
-------------------------------------------------------
<p>Name: <%= customer.name %></p>
-------------------------------------------------------

+_employee.html.erb+:

[source, html]
-------------------------------------------------------
<p>Name: <%= employee.name %></p>
-------------------------------------------------------

In this case, Rails will use the customer or employee partials as appropriate for each member of the collection.

=== Using Nested Layouts

You may find that your application requires a layout that differs slightly from your regular application layout to support one particular controller. Rather than repeating the main layout and editing it, you can accomplish this by using nested layouts (sometimes called sub-templates). Here's an example:

Suppose you have the follow ApplicationController layout:

+app/views/layouts/application.erb+

[source, html]
-------------------------------------------------------
<html>
<head>
  <title><%= @page_title %><title>
  <% stylesheet_tag 'layout' %>
  <style type="text/css"><%= yield :stylesheets %></style>
<head>
<body>
  <div id="top_menu">Top menu items here</div>
  <div id="menu">Menu items here</div>
  <div id="main"><%= yield %></div>
</body>
</html>
-------------------------------------------------------

On pages generated by NewsController, you want to hide the top menu and add a right menu:

+app/views/layouts/news.erb+

[source, html]
-------------------------------------------------------
<% content_for :stylesheets do %>
  #top_menu {display: none}
  #right_menu {float: right; background-color: yellow; color: black}
<% end -%>
<% content_for :main %>
  <div id="right_menu">Right menu items here</div>
  <%= yield %>
  <% end -%>
<% render :file => 'layouts/application' %>
-------------------------------------------------------

NOTE: In versions of Rails before Rails 2.3, you should use +render \'layouts/applications\'+ instead of +render :file => \'layouts/applications\'+

That's it. The News views will use the new layout, hiding the top menu and adding a new right menu inside the "content" div.

There are several ways of getting similar results with differents sub-templating schemes using this technique. Note that there is no limit in nesting levels. One can use the +ActionView::render+ method via +render \'layouts/news\'+ to base a new layout on the News layout.

== Changelog ==

http://rails.lighthouseapp.com/projects/16213-rails-guides/tickets/15[Lighthouse ticket]

* December 27, 2008: Merge patch from Rodrigo Rosenfeld Rosas covering subtemplates
* December 27, 2008: Information on new rendering defaults by link:../authors.html#mgunderloy[Mike Gunderloy] 
* November 9, 2008: Added partial collection counter by link:../authors.html#mgunderloy[Mike Gunderloy] 
* November 1, 2008: Added +:js+ option for +render+ by link:../authors.html#mgunderloy[Mike Gunderloy] 
* October 16, 2008: Ready for publication by link:../authors.html#mgunderloy[Mike Gunderloy] 
* October 4, 2008: Additional info on partials (+:object+, +:as+, and +:spacer_template+) by link:../authors.html#mgunderloy[Mike Gunderloy] (not yet approved for publication)
* September 28, 2008: First draft by link:../authors.html#mgunderloy[Mike Gunderloy] (not yet approved for publication)








































