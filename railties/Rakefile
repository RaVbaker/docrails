require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'
require 'rake/gempackagetask'

require 'date'
require 'rbconfig'


task :default => :test
task :test => 'test:isolated'

## This is required until the regular test task
## below passes.  It's not ideal, but at least
## we can see the failures
namespace :test do
  task :isolated do
    dir = ENV["TEST_DIR"] || "**"
    Dir["test/#{dir}/*_test.rb"].all? do |file|
      next true if file.include?("fixtures")
      ruby = File.join(*RbConfig::CONFIG.values_at('bindir', 'RUBY_INSTALL_NAME'))
      system(ruby, '-Itest', "-I#{File.dirname(__FILE__)}/../activesupport/lib", file)
    end or raise "Failures"
  end
end

Rake::TestTask.new('test:regular') do |t|
  t.libs << 'test' << "#{File.dirname(__FILE__)}/../activesupport/lib"
  t.pattern = 'test/**/*_test.rb'
  t.warning = true
  t.verbose = true
end

# Update spinoffs -------------------------------------------------------------------

desc "Updates application README to the latest version Railties README"
task :update_readme do
  readme = "lib/rails/generators/rails/app/templates/README"
  rm readme
  cp "./README", readme
end

desc 'Generate guides (for authors), use ONLY=foo to process just "foo.textile"'
task :generate_guides do
  ENV["WARN_BROKEN_LINKS"] = "1" # authors can't disable this
  ruby "guides/rails_guides.rb"
end

task :update_prototype_ujs do
  system "curl http://github.com/rails/prototype-ujs/raw/master/src/rails.js > lib/rails/generators/rails/app/templates/public/javascripts/rails.js"
end

# Validate guides -------------------------------------------------------------------------
desc 'Validate guides, use ONLY=foo to process just "foo.html"'
task :validate_guides do
  ruby "guides/w3c_validator.rb"
end

# Generate documentation ------------------------------------------------------------------

Rake::RDocTask.new { |rdoc|
  rdoc.rdoc_dir = 'doc'
  rdoc.title    = "Railties -- Gluing the Engine to the Rails"
  rdoc.options << '--line-numbers' << '--inline-source' << '--accessor' << 'cattr_accessor=object'
  rdoc.options << '--charset' << 'utf-8'
  rdoc.template = ENV['template'] ? "#{ENV['template']}.rb" : '../doc/template/horo'
  rdoc.rdoc_files.include('README', 'CHANGELOG')
  rdoc.rdoc_files.include('lib/**/*.rb')
  rdoc.rdoc_files.exclude('lib/rails/generators/**/templates/*')
}

# Set available guide locales .....................................

locale_directory = "doc/guides/source/"
locale_name_patterns = [/\A[a-z]{2}\z/, /\A[a-z]{2}-[A-Z]{2}\z/]
available_locales = []

Dir.entries(locale_directory).each do |entry|
	if File.directory?(File.join(locale_directory, entry))
		for pattern in locale_name_patterns
			unless entry.scan(pattern).empty?
				available_locales << entry
			end
		end
	end
end

desc "Displays currently available guide locales"
task :guides_locales do
	unless available_locales.empty?
		puts "While the guides are generated in English by default, any of the following locales can be passed as an argument to 'rake guides' to obtain documentation in that locale:"
		for locale in available_locales
			puts "- " + locale
		end
	else
		puts "The guides are currently only available in English."
	end
end

desc "Generate guides for the framework. Use ONLY='migrations i18n.txt' option to build just specific ones."
task :guides do
  require 'mizuho/generator'
  
  ignore = ['..', 'icons', 'images', 'templates', 'stylesheets']
  
  if !(ENV["LOCALE"]).empty? && available_locales.include?(ENV["LOCALE"])
  	# Localized settings
  	source = "doc/guides/source/#{ENV['LOCALE']}/"
  	html = "doc/guides/html/#{ENV['LOCALE']}/"
	else
		# English settings
		source = "doc/guides/source/"
  	html   = "doc/guides/html/"
  	
  	# Exclude locale directories since they are in the source directory
  	# and we don't need them for English guides.
  	for l in available_locales
  		l << ignore
		end
	end


  FileUtils.rm_r(html) if File.directory?(html)
  FileUtils.mkdir(html)

  template = File.expand_path("doc/guides/source/templates/guides.html.erb")
  asciidoc_conf = 'doc/guides/asciidoc.conf'

  ignore = ['..', 'icons', 'images', 'templates', 'stylesheets']
  #ignore << 'active_record_basics.txt'

  indexless = ['index.txt', 'authors.txt']

  # Traverse all entries in doc/guides/source/ or only those specified in ONLY env variable
  entries = Dir.entries(source)
  if ENV['ONLY']
    only = ENV['ONLY'].split(' ')
    unless only.empty?
      entries = entries.select do |e|
        only.include?(e) || only.include?(e.sub(/\.txt$/, ''))
      end
    end
  end

  entries.each do |entry|
    next if ignore.include?(entry) or entry =~ /^\./ # because Vim is always saving hidden swap files

    if File.directory?(File.join(source, entry))
      # If the current entry is a directory, then we will want to compile
      # the 'index.txt' file inside this directory.
      if entry == '.'
        input  = File.join(source, 'index.txt')
        output = File.join(html, "index.html")
      else
        input  = File.join(source, entry, 'index.txt')
        output = File.join(html, "#{entry}.html")
      end
    else
      # If the current entry is a file, then we will want to compile this file.
      input  = File.join(source, entry)
      output = File.join(html, entry).sub(/\.txt$/, '.html')
    end

    begin
      puts "GENERATING => #{output}"
      ENV['MANUALSONRAILS_TOC'] = 'no' if indexless.include?(entry)
      Mizuho::Generator.new(input, :output => output, :template => template, :conf_file => asciidoc_conf).start
    rescue Mizuho::GenerationError
      STDERR.puts "*** ERROR"
      exit 2
    ensure
      ENV.delete('MANUALSONRAILS_TOC')
    end
  end

  # Copy images and css files to html directory. These dirs are in .gitigore and shouldn't be source controlled.
  FileUtils.cp_r File.join(source, 'images'), File.join(html, 'images')
  FileUtils.cp_r File.join(source, 'stylesheets'), File.join(html, 'stylesheets')
end

# Generate GEM ----------------------------------------------------------------------------

spec = eval(File.read('railties.gemspec'))

Rake::GemPackageTask.new(spec) do |pkg|
  pkg.gem_spec = spec
end

# Publishing -------------------------------------------------------

desc "Release to gemcutter"
task :release => :package do
  require 'rake/gemcutter'
  Rake::Gemcutter::Tasks.new(spec).define
  Rake::Task['gem:push'].invoke
end

desc "Publish the guides"
task :pguides => :generate_guides do
  require 'rake/contrib/sshpublisher'
  mkdir_p 'pkg'
  `tar -czf pkg/guides.gz guides/output`
  Rake::SshFilePublisher.new("web.rubyonrails.org", "/u/sites/guides.rubyonrails.org/public", "pkg", "guides.gz").upload
  `ssh web.rubyonrails.org 'cd /u/sites/guides.rubyonrails.org/public/ && tar -xvzf guides.gz && mv guides/output/* . && rm -rf guides*'`
end
