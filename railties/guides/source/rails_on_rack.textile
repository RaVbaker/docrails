h2. Rails on Rack

Ten przewodnik opisuje integrację Railsów z interfejsem serwera webowego Rack oraz komunikację z wykorzystaniem innych komponentów frameworka Rack. Zapoznanie się z tym przewodnikiem pozwoli ci na:

* Tworzenie Metalowych aplikacji Railsowych
* Korzystanie z obiektów Middleware interfejsu Rack w aplikacjach Railsowych
* Zrozumienie wewnętrznego stosu middleware modułu Action Pack
* Definiowanie własnego stosu middleware

endprologue.

WARNING: Ten przewodnik zakłada praktyczną znajomość założeń frameworka Rack i związanych z nim pojęć takich jak obiekty middleware, mapowanie url (url maps), czy obiekt +Rack::Builder+.

h3. Wprowadzenie do Rack

bq. Rack provides a minimal, modular and adaptable interface for developing web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call.

bq. Rack dostarcza minimalnego, modułowego i adaptowalnego interfejsu do rozwijania aplikacji webowych w Rubym. Poprzez żądania i odpowiedzi HTTP w najprostszej możliwej postaci unifikuje i łączy w sobie API dla serwerów WWW, frameworków webowych i oprogramowania pośredniczącego (tzw. middleware software) w jedną metodę zapytania.

- "Dokumentacja Rack API":http://rack.rubyforge.org/doc/

Note: Interfejs serwera webowego umożliwia komunikację (ang. interfacing) aplikacji webowej z serwerem WWW, inną aplikacją lub frameworkiem webowym. Przyjęło się *mylne* utożsamianie interfejsu z węższym pojęciem interfejsu użytkownika (komunikacja aplikacja-użytkownik). -przypis tłumacza

Wyjaśnienie czym dokładnie jest Rack nie jest zadaniem tego przewodnika. Jeśli nie jest ci on jeszcze znany, sięgnij po któreś z tych źródeł :

* "Oficjalna strona projektu (w języku angielskim)":http://rack.github.com
* "Introducing Rack":http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html
* "Ruby on Rack #1 - Hello Rack!":http://m.onkey.org/2008/11/17/ruby-on-rack-1
* "Ruby on Rack #2 - The Builder":http://m.onkey.org/2008/11/18/ruby-on-rack-2-rack-builder

h3. Rails on Rack

h4. Obiekty Rack w Aplikacjach Railsowych

<tt>ActionController::Dispatcher.new</tt> to podstawowy obiekt aplikacji Rack występujący w aplikacjach Railsowych. Każdy z serwerów WWW zgodnych z Rack powinien posłużyć się tym obiektem, aby obsłużyć aplikację Railsową.

h4. +script/server+

<tt>script/server</tt> stanowi Railsowy odpowiednik skryptu Rack +rackup+. Jego zadaniem jest stworzenie obiektu +Rack::Builder+ i uruchomienie serwer WWW. 

Oto jak +script/server+ tworzy instancję +Rack::Builder+:

<ruby>
app = Rack::Builder.new {
  use Rails::Rack::LogTailer unless options[:detach]
  use Rails::Rack::Debugger if options[:debugger]
  use ActionDispatch::Static
  run ActionController::Dispatcher.new
}.to_app
</ruby>

Obiekty middleware zastosowane w powyższym kodzie przydają się praktycznie tylko w środowisku rozwojowym. Poniższa tabela opisuje ich użycie:

|_.Middleware|_.Zastosowanie|
|+Rails::Rack::LogTailer+|Dołącza zawartość logu do konsoli|
|+ActionDispatch::Static+|Zapisuje statystyki serwera w katalogu +RAILS_ROOT/public+|
|+Rails::Rack::Debugger+|Uruchamia Debuggera|

h4. +rackup+

Aby stosować skrypt +rackup+ zamiast Railsowego +script/server+, możesz umieścić następujący kod w pliku +config.ru+ w katalogu głównym aplikacji:

<ruby>
# RAILS_ROOT/config.ru
require "config/environment"

use Rails::Rack::LogTailer
use ActionDispatch::Static
run ActionController::Dispatcher.new
</ruby>

Następnie uruchomić serwer:

<shell>
[lifo@null application]$ rackup config.ru
</shell>

Aby sprawdzić dostępne opcje +rackup+ wywołaj:

<shell>
[lifo@null application]$ rackup --help
</shell>

h3. Stos middleware modułu Action Controller

Wiele komponentów modułu Action Controller jest zaimplementowanych jako obiekty middleware Rack. +ActionController::Dispatcher+ używa +ActionController::MiddlewareStack+, aby łącząc różne wewnętrzne i zewnętrzne obiekty middleware stworzyć kompletną Railsową aplikację Rack.

NOTE: +ActionController::MiddlewareStack+ stanowi Railsowy odpowiednik obiektu +Rack::Builder+, ale nieco bardziej elastyczniejszy i dostosowany do wymagań Railsów.

h4. Podgląd stosu middleware

Aby wyświetlić zawartość stosu middleware, który jest aktualnie w użyciu posłużymy się zadaniem rake:

<shell>
$ rake middleware
</shell>

Oto jak mógłby wyglądać rezultat tego zapytania dla świeżo wygenerowanej aplikacji:

<ruby>
use Rack::Lock
use ActionController::Failsafe
use ActionController::Session::CookieStore, , {:secret=>"<secret>", :session_key=>"_<app>_session"}
use Rails::Rack::Metal
use ActionDispatch::RewindableInput
use ActionController::ParamsParser
use Rack::MethodOverride
use Rack::Head
use ActiveRecord::QueryCache
run ActionController::Dispatcher.new
</ruby>

Zadania poszczególnych obiektów middleware objaśnione zostały w sekcji "Stos wewnętrznych obiektów Middleware":#stos-wenetrznych-obiektow-middleware.

h4. Konfiguracja stosu middleware

Railsy dostarczają nam prostego interfejsu konfiguracyjnego +config.middleware+ dzięki któremu dodamy, usuniemy i zmodyfikujemy obiekty ze stosu poprzez +environment.rb+ lub plik konfiguracji określonego środowiska <tt>environments/&lt;environment&gt;.rb</tt>.

h5. Dodanie obiektu middleware

Aby dodać obiekt middleware do stosu możesz posłużyć się dowolną z poniższych metod:

* +config.middleware.use(new_middleware, args)+ - Dodaje nowy obiekt middleware na dnie stosu.

* +config.middleware.insert_before(existing_middleware, new_middleware, args)+ - Dodaje nowy obiekt middleware przed wskazanym, istniejącym obiektem middleware.

* +config.middleware.insert_after(existing_middleware, new_middleware, args)+ - Dodaje nowy obiekt middleware za wskazanym, istniejącym obiektem middleware.

<strong>Przykład:</strong>

<ruby>
# config/environment.rb

# Odłóż Rack::BounceFavicon na dno stosu
config.middleware.use Rack::BounceFavicon

# Dodaj Lifo::Cache za ActiveRecord::QueryCache.
# Przekaż argument { :page_cache => false } do Lifo::Cache.
config.middleware.insert_after ActiveRecord::QueryCache, Lifo::Cache, :page_cache => false
</ruby>

h5. Zamiana obiektów middleware

Możesz podmienić istniejący obiekt ze stosu middleware za pomocą +config.middleware.swap+.

<strong>Przykład:</strong>

<ruby>
# config/environment.rb

# Zamień ActionController::Failsafe na Lifo::Failsafe
config.middleware.swap ActionController::Failsafe, Lifo::Failsafe
</ruby>

h5. Stos middleware jest tablicą

Stos middleware zachowuje się jak zwykła +tablica+. Możesz posłużyć się metodami odpowiednimi dla +tablic+, aby dodać, zmienić kolejność lub usunąć elementy stosu. Metody przestawione powyżej są po prostu wygodniejsze.

Przykładowo, poniższe polecenie usunie obiekty middleware odpowiadające podanej nazwie klasy:

<ruby>
config.middleware.delete(middleware)
</ruby>

h4. Stos wewnętrznych obiektów Middleware

Znaczna część funkcjonalności modułu Action Controller opiera sie na stosowaniu obiektów middleware. Poniższa tabela przedstawia ich użycie: 

|_.Middleware|_.Zastosowanie|
|+Rack::Lock+|Podnosi flagę +env["rack.multithread"]+ i przełącza aplikację w tryb Mutex.|
|+ActionController::Failsafe+|Zwraca klientowi status HTTP +500+ jeśli podczas wysyłania wystąpiły jakieś wyjątki.|
|+ActiveRecord::QueryCache+|Aktywuje cache dla zapytań w module Active Record.|
|+ActionController::Session::CookieStore+|Przełącza na użycie cookie do przechowywania sesji.|
|+ActionController::Session::MemCacheStore+|Przełącza na użycie pamięci memcached do przechowywania sesji.|
|+ActiveRecord::SessionStore+|Użycie bazy danych do przechowywania sesji.|
|+Rack::MethodOverride+|Ustanawia metodę HTTP na podstawie parametru +_method+ lub +env["HTTP_X_HTTP_METHOD_OVERRIDE"]+.|
|+Rack::Head+|Odrzuca wartość body odpowiedzi, jeśli klient przesłał żądanie +HEAD+.|

TIP: Możesz użyć powyższych obiektów middleware w stworzonym przez siebie stosie Rack.

h4. Dostosowanie wewnętrznego stosu middleware

Możesz zamienić cały stos middleware przy pomocy +ActionController::Dispatcher.middleware=+.

<strong>Przykład:</strong>

Umieść następujący kod w +initializers+:

<ruby>
# config/initializers/stack.rb
ActionController::Dispatcher.middleware = ActionController::MiddlewareStack.new do |m|
  m.use ActionController::Failsafe
  m.use ActiveRecord::QueryCache
  m.use Rack::Head
end
</ruby>

Podgląd stosu middleware:

<shell>
$ rake middleware
(in /Users/lifo/Rails/blog)
use ActionController::Failsafe
use ActiveRecord::QueryCache
use Rack::Head
run ActionController::Dispatcher.new
</shell>

h4. Stosowanie obiektu Rack Builder

Oto sposób, na to by zamiast Railsowego +MiddlewareStack+ stosować +Rack::Builder+

<strong>Wyczyść istniejący stos middleware</strong>

<ruby>
# environment.rb
config.middleware.clear
</ruby>

<br />
<strong>Umieść plik +config.ru+ w katalogu +RAILS_ROOT+</strong>

<ruby>
# config.ru
use MyOwnStackFromStratch
run ActionController::Dispatcher.new
</ruby>

h3. Metalowe aplikacje Railsowe 

Metalowe aplikacje Railsowe to minimalne aplikacje Rack, zaprojektowane tak, aby ściśle łączyły się z typowymi aplikacjami Railsowymi. Jako że Metalowe aplikacje Railsowe pomijają cały stos modułu Action Controller, obsługa żądania nie obciąża w ogóle samych Railsów. Może to być istotne w szczególnych przypadkach, kiedy wydajność stosu frameworka Rails sprawia problemy.

Ryan Bates stworzył interesujący "screencast (w języku angielskim)":http://railscasts.com/episodes/150-rails-metal, w którym omawia generowanie i stosowanie Metalowych aplikacji Railsowych.

h4. Generowanie Metalowej aplikacji Railsowej

Railsy dostarczają generatora +metal+, który umożliwia tworzenie tego typu aplikacji:

<shell>
$ script/generate metal poller
</shell>

Zawartość pliku +poller.rb+ wygenerowanego w katalogu +app/metal+:

<ruby>
# Allow the metal piece to run in isolation
require(File.dirname(__FILE__) + "/../../config/environment") unless defined?(Rails)

class Poller
  def self.call(env)
    if env["PATH_INFO"] =~ /^\/poller/
      [200, {"Content-Type" => "text/html"}, ["Hello, World!"]]
    else
      [404, {"Content-Type" => "text/html"}, ["Not Found"]]
    end
  end
end
</ruby>

Aplikacje znajdujące się w +app/metal+ w katalogu wtyczek również zostaną odnalezione i dodane do listy.

Celem aplikacji Metalowych jest optymalizacja. Zanim zdecydujesz się na ich stosowanie upewnij się, że pojąłeś konsekwencje stosowania powiązanego działania. Zacznij od przeczytania postu "Performance of Rails Metal":http://weblog.rubyonrails.org/2008/12/20/performance-of-rails-metal na weblogu projektu.

h4. Kolejność wykonania

Wszystkie aplikacje Metalowe uruchamiane są przez obiekt middleware +Rails::Rack::Metal+, który jest częścią łańcucha +ActionController::MiddlewareStack+.

Oto podstawowa metoda odpowiedzialna za działanie aplikacji Metalowej:

<ruby>
def call(env)
  @metals.keys.each do |app|
    result = app.call(env)
    return result unless result[0].to_i == 404
  end
  @app.call(env)
end
</ruby>

Zmienna +@metals+ w powyższym kodzie to posortowana tablica asocjacyjna. Ze względu na domyślne sortowanie alfabetyczne plik +aaa.rb+ znajdzie się przed +bbb.rb+ w łańcuchu.

Można zastąpić domyślne sortowanie w twoim środowisku. Wystarczy dodać następującą linijkę do pliku +config/environment.rb+

<ruby>
config.metals = ["Bbb", "Aaa"]
</ruby>

Każdy łańcuch w tej tablicy powinien odpowiadać nazwie twojej metalowej klasy. Pamiętaj, że aplikacje Metalowe, które nie znajdą się na tej liście nie zostaną wczytane.

WARNING: Aplikacje metalowe nie mogą zwracać statusu HTTP +404+, ponieważ jest on używany przy wywoływaniu łańcucha Metalowego. Jeśli zajdzie taka konieczność posłuż się standardowym kontrolerem, lub odpowiednio zaadaptowanym obiektem middleware.

h3. Źródła

h4. Nauka Rack

* "Official Rack Website":http://rack.github.com
* "Introducing Rack":http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html
* "Ruby on Rack #1 - Hello Rack!":http://m.onkey.org/2008/11/17/ruby-on-rack-1
* "Ruby on Rack #2 - The Builder":http://m.onkey.org/2008/11/18/ruby-on-rack-2-rack-builder

h4. Objaśnienie zasad działnia obiektów Midlleware

* "Railscast on Rack Middlewares":http://railscasts.com/episodes/151-rack-middleware

h3. Changelog

"Lighthouse ticket":http://rails.lighthouseapp.com/projects/16213-rails-guides/tickets/58

* February 7, 2009: Second version by "Pratik":credits.html#lifo
* January 11, 2009: First version by "Pratik":credits.html#lifo