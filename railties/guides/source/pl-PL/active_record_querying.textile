h2. Interfejs zapytań modułu Active Record

Ten przewodnik obejmuje różne sposoby pobierania danych z bazy używając modułu Active Record. Kierując się tym przewodnikiem będziesz potrafił: 

* szukać rekordów za pomocą różnych metod i warunków 
* uściślić porządek, pobierane atrybuty, grupowanie i inne właściwości wyszukanych rekordów 
* używać eager loadingu, by zmniejszyć liczbę zapytań potrzebnych do pobrania danych z bazy 
* używać dynamicznych metod wyszukiwania 
* tworzyć nazwane źródła by dodać niestandardowe zachowania wyszukiwania do swojego modelu 
* sprawdzać istnienie poszczególnych rekordów 
* dokonywać różnych obliczeń na modelach modułu Active Record 

Jeżeli jesteś przyzwyczajony do używania czystego SQL do znajdowania rekordów w bazie, dowiesz się, że są na to lepsze sposoby w Railsach. Moduł Active Record odcina cię od konieczności używania SQL w większości przypadków.

Kod przedłożony w tym podręczniku nawiązuje do jednego lub większej ilości następujących modeli:

TIP: Wszystkie następujące modele używają +id+ jako klucza głównego, jeśli nie jest to określone w inny sposób.
<br />

<ruby>
class Client < ActiveRecord::Base
  has_one :address
  has_many :orders
  has_and_belongs_to_many :roles
end
</ruby>

<ruby>
class Address < ActiveRecord::Base
  belongs_to :client
end
</ruby>

<ruby>
class Order < ActiveRecord::Base
  belongs_to :client, :counter_cache => true
end
</ruby>

<ruby>
class Role < ActiveRecord::Base
  has_and_belongs_to_many :clients
end
</ruby>

Moduł Active Record wykonuje dla ciebie zapytania w bazie danych i jest kompatybilny z większością systemów (MySQL, PostgreSQL and SQLite by wymienić kilka). Niezależnie od tego, jakiego systemu używasz, forma zapytań w module Active Record zawsze będzie taka sama. 

h3. Uzyskiwanie obiektów z bazy danych 

Aby odzyskać rekord z bazy danych, moduł Active Record proponuje metodę klasową zwaną +Model.find+. Pozwala ona na przekazwywanie do niej argumentów, aby przygotwać pewne zapytania bez konieczności pisania ich w czystym SQL. 

Podstawowe funkcjonalności <tt>Model.find(options)</tt> to: 

* konwertowanie dostarczonej opcji do zapytania SQL 
* wykonanie zapytania i otrzymanie odebranie odpowiednich wyników z bazy 
* stworzenie odpowiedniego egzemplarza obiektu Ruby dla właściwego modelu w związku z każdą zwróconą z bazy linią 
* wykonanie callbacków +after_find+, jeśli takowe są zadeklarowane. 

h4. Uzyskiwanie pojedynczego obiektu 

Moduł Active Record umożliwia Ci uzyskanie pojedynczego obiektu na trzy sposoby. 

h5. Używanie klucza głównego 

Używając <tt>Model.find(primary_key, options = nil)</tt>, możesz otrzymać obiekty odpowiadające podanemu _kluczowi głównemu_ i pasujące do zadanych opcji, jeśli zostały określone. Na przykład:

<ruby>
# Find the client with primary key (id) 10.
client = Client.find(10)
=> #<Client id: 10, name: => "Ryan">
</ruby>

Odpowiednik SQL powyższego jest następujący:

<sql>
SELECT * FROM clients WHERE (clients.id = 10)
</sql>

<tt>Model.find(primary_key)</tt> zgłosi wyjątek +ActiveRecord::RecordNotFound+ jeśli nie znajdzie pasujących do zapytania rekordów. 

h5. +first+
 
<tt>Model.first(options = nil)</tt> szuka pierwszego rekordu pasującego do zadanej opcji. Jeśli żadne opcja nie są określone, zwracany jest pierwszy pasujący rekord. Na przykład:

<ruby>
client = Client.first
=> #<Client id: 1, name: => "Lifo">
</ruby>

Odpowiednik SQL powyższego jest następujący:

<sql>
SELECT * FROM clients LIMIT 1
</sql>

<tt>Model.first</tt> zwróci +nil+, jeśli nie zostanie znaleziony żaden pasujący rekord. Żaden wyjątek nie zostanie zgłoszony.

NOTE: +Model.find(:first, options)+ jest odpowiednikiem +Model.first(options)+.

h5. +last+
 
<tt>Model.last(options = nil)</tt> szuka ostatniego rekordu pasującego do zadanej opcji. Jeśli żadne opcja nie są określone, zwracany jest ostatni pasujący rekord. Na przykład:

<ruby>
client = Client.last
=> #<Client id: 221, name: => "Russel">
</ruby>

Odpowiednik SQL powyższego jest następujący:

<sql>
SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1
</sql>

<tt>Model.last</tt> zwróci +nil+, jeśli nie zostanie znaleziony żaden pasujący rekord. Żaden wyjątek nie zostanie zgłoszony.

NOTE: +Model.find(:last, options)+ jest odpowiednikiem +Model.last(options)+. 

h4. Uzyskiwanie wielu obiektów 

h5. Używanie wielu kluczy głównych 

<tt>Model.find(array_of_primary_key, options = nil)</tt> akceptuje również tablicę _kluczy głównych_. Zwracana jest tablica rekordów pasujących do do podanych _kluczy głównych_. Na przykład:

<ruby>
# Find the clients with primary keys 1 and 10.
client = Client.find(1, 10) # Or even Client.find([1, 10])
=> [#<Client id: 1, name: => "Lifo">, #<Client id: 10, name: => "Ryan">]
</ruby>

Odpowiednik SQL powyższego jest następujący:

<sql>
SELECT * FROM clients WHERE (clients.id IN (1,10))
</sql>

<tt>Model.find(array_of_primary_key)</tt> zgłosi wyjątek +ActiveRecord::RecordNotFound+ jeśli dla <strong>żadnego</strong> z kluczy nie zostanie znaleziony żaden pasujący rekord. 

h5. Znajdowanie wszystkich 

<tt>Model.all(options = nil)</tt> znajduje wszystkie rekordy pasujące do zadanej opcji. Jeśli żadna opcja nie została określona, zostaną zwrócone wszystkie rekordy z bazy.

<ruby>
# Find all the clients.
clients = Client.all
=> [#<Client id: 1, name: => "Lifo">, #<Client id: 10, name: => "Ryan">, #<Client id: 221, name: => "Russel">]
</ruby>

 Odpowiednik SQL powyższego jest następujący:

<sql>
SELECT * FROM clients
</sql>

<tt>Model.all</tt> zwraca pustą tablicę array+[]+, jeśli nie znajdzie pasujących rekordów. Żaden wyjątek nie zostanie zgłoszony.

NOTE: +Model.find(:all, options)+ jest odpowiednikiem +Model.all(options)+.
 
h4. Uzyskiwanie wielu obiektów porcjami 

Czasami musisz iterować na dużym zbiorze rekordów, na przykład ab wysłać newsletter lub eksportować dane, itd.

Zacznijmy od tego:

<ruby>
# Very inefficient when users table has thousands of rows.
User.all.each do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

Ale jeżeli liczba rekordów w tabeli jest bardzo duża, powyższe rozwiązanie może być trudno wykonalne, lub po prostu niemożliwe.

Dzieje się tak, ponieważ moduł Active Record ściąga _całą tabelę_, buduje po linii obiekt modelu i zapisuje całą tablicę w pamięci. Czasami jest po prostu zbyt wiele obiektów wymagających zbyt wiele pamięci. 

h5. +find_each+
 
Aby efektywnie iterować na dużych tablicach, moduł Active Record oferuje metodę wyszukującą porcjami zwaną +find_each+:

<ruby>
User.find_each do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Konfigurowanie rozmiaru porcji*

Domyślnie +find_each+ pobiera z bazy porcje po tysiąc rekordów i przywołuje je jeden po drugim. Rozmiar tych porcji jest konfigurowalny za pomocą opcji +:batch_size+.

Pobieranie rekordów +User+ porcjami o rozmiarze +5000+:

<ruby>
User.find_each(:batch_size => 5000) do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Rozpoczynanie wyszukiwania porcjami od określonego klucza*

Rekordy są pobierane w porządku rosnącym zgodnie z kluczem głównym, który musi być obiektem typu integer. Opcja +:start+ umożliwia ci określenie początkowe ID wyszukiwania, jeżeli najniższe nie jest tym, od któego chcesz zacząć. Jest to przydatne, na przykład by móc wznowić przerwane wyszukiwanie, jeżeli zapamiętane zostało ID ostatniego pobranego obiektu.

Wysyłanie newslettera do użytkowników o ID wyższym niż +2000+:

<ruby>
User.find_each(:batch_size => 5000, :start => 2000) do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Dodatkowe opcje*

+find_each+ przyjmuje takie same opcje jak metoda +find+. Tak czy inaczej, +:order+ i +:limit+ są wewnętrznie potrzebne i w związku z tym nie wolno ich pomijać. 

h5. +find_in_batches+ 

Możesz pracować używając fragmentów tabel zamiast pojedynczych linii. Jest to metoda analogiczna do +find_each+, ale pobiera tablicę dla modelu.

<ruby>
# Works in chunks of 1000 invoices at a time.
Invoice.find_in_batches(:include => :invoice_lines) do |invoices|
  export.add_invoices(invoices)
end
</ruby>

Powyższe przywoła zadany blok +1000+ faktur za każdym razem. 

h3. Warunki

Metoda +find+ pozwala określić warunki ograniczenia zwracanych rekordów, reprezentujących +WHERE+-part instrukcji SQL. Warunki mogą być określone jako ciąg znaków, tablica lub tablica asocjacyjna.

h4. Warunki czystego łańcucha znaków

Jeśli do wyszukań chcesz dodać warunki, wystarczy, że je tam określisz:  +Client.first(:conditions => "orders_count = '2'")+. Funkcja ta znajdzie wszystkich klientów, u których wartość pola +orders_count+ wynosi 2.

Budowa własnych warunków czystego łańcucha może być narażona na ataki typu SQL injection. Na przykład, +Client.first(:conditions => "name LIKE '%#{params[:name]}%'")+ nie jest bezpieczny. Przeczytaj następny rozdział, w którym preferowanym sposobem rozpatrywania warunków jest używanie tablicy.

h4. Warunki tablicy

Ale co, jeżeli liczba może się zmieniać, być argumentem lub poziomem statusu użytkownika? Wtedy znalezienie odbywa się w następujący sposób:

<ruby>
Client.first(:conditions => ["orders_count = ?", params[:orders]])
</ruby>


Moduł Active Record przejdzie przez pierwszy element wartości warunku i wszystkie elementy dodatkowe pierwszego elementu zmieni w znaki zapytania +(?)+ .

Jeśli chcesz określić dwa warunki, możesz to zrobić w następujący sposób:

<ruby>
Client.first(:conditions => ["orders_count = ? AND locked = ?", params[:orders], false])
</ruby>

W tym przykładzie pierwszy znak zapytania będzie zamieniony z wartością w  +params[:orders]+ Drugi natomiast zostanie zamieniony z SQL'ową reprezentacją +false+, która zależy od sterownika.

Powodem takiego pisania kodu:

<ruby>
Client.first(:conditions => ["orders_count = ?", params[:orders]])
</ruby>

zamiast takiego:

<ruby>
Client.first(:conditions => "orders_count = #{params[:orders]}")
</ruby>

są względy bezpieczeństwa argumentu. Wykorzystywanie zmiennej bezpośrednio w warunkach łańcucha znaków przekaże zmienną do bazy danych *taką jaką jest*. Oznacza to, że użytkownik, który może mieć złe intencje, przekaże nieprzefiltrowaną zmienną. Jeśli w ten sposób piszesz kod, narażasz swoją bazę danych na ryzyko, ponieważ gdy użytkownik stwierdzi, że może wykorzystać twoją bazę danych będzie mógł z nią zrobić co zechce. Nigdy przenigdy nie wykorzystuj argumentów bezpośrednio w warunkach łańcucha danych.

TIP: Więcej informacji o niebezpieczeństwach SQL injection znajdziesz w "Ruby on Rails Security Guide":security.html#sql-injection.

h5. Warunek zastępczy

Podobnie do +(?)+ wymiennego stylu parametrów, w twoich warunkach tablicy możesz określać klucz/wartość tablicy asocjacyjnej:


<ruby>
Client.all(:conditions =>
  ["created_at >= :start_date AND created_at <= :end_date", { :start_date => params[:start_date], :end_date => params[:end_date] }])
</ruby>

Jeśli masz dużo zmiennych w warunku, to dzięki temu poprawisz czytelność kodu.

h5. Zakres warunków

Jeśli szukasz zakresu w tabeli (na przykład, użytkowników utworzonych w określonych ramach czasowych) możesz użyć opcji warunku połączonych z instrukcją +IN+ SQL. Jeśli masz dwie daty dołączenia z kontrolera, aby znaleźć zakres możesz zrobić coś takiego:

<ruby>
Client.all(:conditions => ["created_at IN (?)",
  (params[:start_date].to_date)..(params[:end_date].to_date)])
</ruby>

Wygenerowane zostanie właściwe zapytanie, które doskonale się sprawdza dla małych przedziałów, ale nie najlepiej dla dużych. Na przykład, jeśli przekażesz w zakresie dat obejmujących obiekt, że rok to 365 (lub w zależności od roku 366) łańcuchów, to nastąpi próba dopasowania danej dziedzinie.

<sql>
SELECT * FROM users WHERE (created_at IN
  ('2007-12-31','2008-01-01','2008-01-02','2008-01-03','2008-01-04','2008-01-05',
  '2008-01-06','2008-01-07','2008-01-08','2008-01-09','2008-01-10','2008-01-11',
  '2008-01-12','2008-01-13','2008-01-14','2008-01-15','2008-01-16','2008-01-17',
  '2008-01-18','2008-01-19','2008-01-20','2008-01-21','2008-01-22','2008-01-23',...
  ‘2008-12-15','2008-12-16','2008-12-17','2008-12-18','2008-12-19','2008-12-20',
  '2008-12-21','2008-12-22','2008-12-23','2008-12-24','2008-12-25','2008-12-26',
  '2008-12-27','2008-12-28','2008-12-29','2008-12-30','2008-12-31'))
</sql>

h5. Warunki czasu i daty

Jeśli przejdziesz na obiekty czasowe, co będzie próbą porównania pola do *co drugiego* w tym zakresie, to może się zrobić *prawdziwy* bałagan:


<ruby>
Client.all(:conditions => ["created_at IN (?)",
  (params[:start_date].to_date.to_time)..(params[:end_date].to_date.to_time)])
</ruby>

<sql>
SELECT * FROM users WHERE (created_at IN
  ('2007-12-01 00:00:00', '2007-12-01 00:00:01' ...
  '2007-12-01 23:59:59', '2007-12-02 00:00:00'))
</sql>

Mogłoby to spowodować, że serwer bazy danych wywoła niespodziewany błąd, na przykład MySQL wyrzuci taki błąd:

<shell>
Got a packet bigger than 'max_allowed_packet' bytes: _query_
</shell>

Gdzie _query_ jest aktualnym zapytaniem użytym do wywołania tego błędu.

W tym przykładzie byłoby lepiej użyć w SQL operatorów mniejszości i większości:

<ruby>
Client.all(:conditions =>
  ["created_at > ? AND created_at < ?", params[:start_date], params[:end_date]])
</ruby>

Możesz również użyć operatorów 'większy lub równy' bądź 'mniejszy lub równy':

<ruby>
Client.all(:conditions =>
  ["created_at >= ? AND created_at <= ?", params[:start_date], params[:end_date]])
</ruby>

Tak jak w języku Ruby. Jeśli chcesz używać skróconej składni sprawdź punkt „Warunki tablic asocjacyjnych”:#warunki-tablic-asocjacyjnych w przewodniku.

h4. Warunki tablic asocjacyjnych

Moduł Active Record pozwala również na przejście w warunki tablic asocjacyjnych, które mogą zwiększyć czytelność twojej składni. Z warunkami tablic asocjacyjnych przechodzisz w tablice asocjacyjne z kluczami pól na których chcesz przeprowadzić warunek i wartościami ,według których chcesz przeprowadzić warunek:

NOTE: W warunkach tablic asocjacyjnych są możliwe jedynie równości, zakres i sprawdzanie podzbioru.

h5. Warunki równości

<ruby>
Client.all(:conditions => { :locked => true })
</ruby>

Pole name nie musi być symbolem, może być łańcuchem:

<ruby>
Client.all(:conditions => { 'locked' => true })
</ruby>

h5. Warunki zakresu

Dobrą rzeczą jest to, że możemy przejść w zakresy z naszymi polami bez generowania olbrzymich zapytań, jak pokazano we wstępie tego rozdziału. 

<ruby>
Client.all(:conditions => { :created_at => (Time.now.midnight - 1.day)..Time.now.midnight})
</ruby>

Używając instrukcji +BETWEEN+ SQL, wyszukamy wszystkich klientów stworzonych wczoraj:

<sql>
SELECT * FROM clients WHERE (clients.created_at BETWEEN '2008-12-21 00:00:00' AND '2008-12-22 00:00:00')
</sql>

Przedstawia to skróconą składnię dla przykładu w „Warunki tablic”:#warunki-tablic

h5. Warunek podzbioru

Jeśli chcesz wyszukać rekord używając wyrażenia +IN+, możesz przekazać tablicę do warunku tablicy asocjacyjnej:

<ruby>
Client.all(:conditions => { :orders_count => [1,3,5] })
</ruby>

Ten kod wygeneruje taki SQL:

<sql>
SELECT * FROM clients WHERE (clients.orders_count IN (1,3,5))
</sql>

h3. Opcje wyszukiwania

Oprócz +:conditions+, +Model.find+ ma wiele innych opcji, przez opcje tablic asocjacyjnych do dostosowania zbioru rekordów wynikowych.

<ruby>
Model.find(id_or_array_of_ids, options_hash)
Model.find(:last, options_hash)
Model.find(:first, options_hash)

Model.first(options_hash)
Model.last(options_hash)
Model.all(options_hash)
</ruby>

Następne rozdziały dają pogląd na wszystkie możliwe klucze dla +options_hash+.

h4. Porządkowanie

Aby pobrać rekordy z bazy danych w określonej kolejności możesz określić opcję +:order+ dla wywołania +find+.

Na przykład, jeśli pobierasz zbiór rekordów i chcesz uporządkować je rosnąco używając pola +created_at+ w twojej tabeli:

<ruby>
Client.all(:order => "created_at")
</ruby>

Polecenie możesz również precyzować używając +ASC+ lub +DSC+:

<ruby>
Client.all(:order => "created_at DESC")
# OR
Client.all(:order => "created_at ASC")
</ruby>

Lub porządkować według wielu pól:

<ruby>
Client.all(:order => "orders_count ASC, created_at DESC")
</ruby>

h4. Wybór konkretnych pól

Domyślnie, <tt>Model.find</tt> wybiera wszystkie pola z wyszukanego zbioru używając +select *+.

Możesz określić podzbiór opcją +:select+, aby wybrać tylko podzbiór pól wyszukanego zbioru. 

NOTE: Jeśli używana jest opcja +:select+, wszystkie zwracane obiekty będą "tylko do odczytu":#obiekty-tylko-do-odczytu.

<br />

Na przykład, aby wybrać tylko kolumny +viewable_by+ i +locked+:


<ruby>
Client.all(:select => "viewable_by, locked")
</ruby>

Zapytanie SQL użyte przez znalezienie połączenia będzie czymś w rodzaju:

<sql>
SELECT viewable_by, locked FROM clients
</sql>

Bądź ostrożny, ponieważ oznacza to również, że inicjalizujesz obiekt modelu tylko z pola, które wybrałeś. W przypadku próby uzyskania dostępu do pola, którego nie ma w zainicjowanych rekordach, otrzymasz:

<shell>
ActiveRecord::MissingAttributeError: missing attribute: <attribute>
</shell>

Where +&lt;attribute&gt;+ is the attribute you asked for. Metoda +id+ nie zgłosi  +ActiveRecord::MissingAttributeError+, więc należy zachować ostrożność podczas pracy z asocjacjami. Aby działać poprawnie potrzebują one metody +id+.

Możesz również wywołać funkcję SQL bez opcji wyboru. Na przykład, Jeśli chciałbyś tylko pobrać pojedynczy rekord jako unikalną wartość w danej dziedzinie za pomocą funckji +DISTINCT+, możesz zrobić to tak:

<ruby>
Client.all(:select => "DISTINCT(name)")
</ruby>

h4. Limit i przesunięcie (Offset)

Aby zastosować +LIMIT+ w SQL uruchamianym przez +Model.find+, możesz określić +LIMIT+ używając opcji +:limit+ i +:offset+.

Jeśli chcesz ograniczyć ilość rekordów do pewnego podzbioru wszystkich wyszukanych rekordów, mógłbyś użyć +:limit+ lub połączyć go z +:offset+. Limit, to maksymalna liczba rekordów, które będą pobierane z zapytania. Przesunięcie (offset), to numer rekordu, od którego rozpocznie się czytanie począwszy od pierwszego rekordu ze zbioru. Na przykład:

<ruby>
Client.all(:limit => 5)
</ruby>

Ten kod zwróci maksymalnie 5 klientów, a ponieważ przesunięcie nie zostało ustalone, zwróci pierwszych 5 klientów z tabeli. SQL, który to wykonuje wygląda następująco:

<sql>
SELECT * FROM clients LIMIT 5
</sql>

Lub określający i +:limit+ i +:offset+:

<ruby>
Client.all(:limit => 5, :offset => 5)
</ruby>

Ten kod zwróci maksymalnie 5 klientów i ponieważ przesunięcie zostało tutaj określone zwróci te rekordy zaczynając od piątego klienta z listy klientów. SQL wygląda tak:

<sql>
SELECT * FROM clients LIMIT 5, 5
</sql>

h4. Grupa

Aby zastosować klauzulę +GROUP BY+ do SQL uruchomionego przez +Model.find+, możesz określić na wynikach opcję +:group+.

Na przykład, jeśli chcesz znaleźć kolekcję dat zamówień utworzonych jak poniżej:

<ruby>
Order.all(:group => "date(created_at)", :order => "created_at")
</ruby>

Zwrócony zostanie pojedynczy obiekt +Order+ dla każdej daty dla której w bazie danych istnieje zamówienie.

SQL, który mógłby być wykonywany wyglądałby tak:

<sql>
SELECT * FROM orders GROUP BY date(created_at)
</sql>

h4. Having

SQL używa klauzuli +HAVING+ do określenia warunków do pól +GROUP BY+. Możesz określić klauzulę +HAVING+ do SQL uruchomionego za pomocą +Model.find+ używając opcji +:having+ na wynikach.

Na przykład:

<ruby>
Order.all(:group => "date(created_at)", :having => ["created_at > ?", 1.month.ago])
</ruby>

Użyty SQL wyglądałby następująco:

<sql>
SELECT * FROM orders GROUP BY date(created_at) HAVING created_at > '2009-01-15'
</sql>

Zwróci to pojedyncze obiekty zamówień dla każdego dnia, ale tylko z ostatniego miesiąca.

h4. Obiekty tylko do odczytu

Aby wyraźnie nie dopuścić do zmiany ani zniszczenia rekordów zwracanych przez +Model.find+, możesz określić na znalezionym wywołaniu opcję +:readonly+ jako +true+.

Wszystkie próby zmiany lub znieszczenia rekordów tylko do odczytu zakończą się niepowodzeniem, zgłaszając modułowi +ActiveRecord::ReadOnlyRecord+ wyjątek. Aby ustawić tę opcję, należy określić ją tak:

<ruby>
Client.first(:readonly => true)
</ruby>

Jeśli przypiszesz ten rekord do zmiennej kleinta, wywołanie następującego kodu zgłosi modułow wyjątek +ActiveRecord::ReadOnlyRecord+:

<ruby>
client = Client.first(:readonly => true)
client.locked = false
client.save
</ruby>

h4. Blokowanie rekordów do aktualizacji

Blokowanie jest pomocne w zapobieganiu wyścigu podczas aktualizacji rekordów w bazie danych i zapewnieniu niepodzielnej aktualizacji. Moduł Active Record oferuje dwa mechanizmy blokujące:

* blokowanie ptymistyczne
* blokowanie pesymistyczne

h5. Blokowanie optymistyczne

Optymistyczne blokowanie umożliwia wielu użytkownikom dostęp do tych samych edytowalnych rekordów i zakłada minimalną sprzeczność z danymi. Czyni to poprzez sprawdzenie, czy inny proces dokonał zmiany zapisu od otwarcia rekordu. Wyjątek +ActiveRecord::StaleObjectError+ jest odrzucany, jeśli nastąpiła zmiana, a aktualizacja jest ignorowana.

<strong>Kolumna optymistycznego blokowania</strong>

Aby korzystać z optymistycznego blokowania, tabela musi mieć kolumnę o nazwie  +lock_version+. Za każdym razem, gdy wyniki są aktualizowane, moduł Active Record inkrementuje kolumnę lock_version. Programy blokujące umożliwiają - jeśli rekord został stworzony dukrotnie - zgłoszenie informacji o ostatnim zapisie +ActiveRecord::StaleObjectError+, o ile pierwszy był również aktualizacją. Przykład:

<ruby>
c1 = Client.find(1)
c2 = Client.find(1)

c1.name = "Michael"
c1.save

c2.name = "should fail"
c2.save # Raises a ActiveRecord::StaleObjectError
</ruby>

Jesteś odpowiedzialny za rozwiązanie konfliktu przez obsłużenie wyjątku a następnie wycofanie zmian, przyłączenie ich lub, w innym wypadku, wykonanie odpowiedniej logiki biznesowej mającej na celu zażegnanie konfliktu.

NOTE: Musisz upewnić się, że domyślna schematu bazy danych kolumny +lock_version+ to +0+.

<br />

Takie zachowanie może być wyłączone przez ustawienie
 <tt>ActiveRecord::Base.lock_optimistically = false</tt>.

Aby zastąpić nazwę kolumy +lock_version+ , +ActiveRecord::Base+ zapewnia metody klasy o nazwie +set_locking_column+:

<ruby>
class Client < ActiveRecord::Base
  set_locking_column :lock_client_column
end
</ruby>

h5. Blokowanie pesymistyczne

Pesymistyczne blokowania wykorzystuje mechanizm blokujący dostarczony przez bazę danych.

Przekazywanie +:lock => true+ do +Model.find+ zapewnia wyłączną blokadę na wybranym wierszu. +Model.find+ używając +:lock+ jest zwykle zawinięty wewnątrz transakcji aby zapobiec sytuacji blokowania systemu. 

Na przykład:

<ruby>
Item.transaction do
  i = Item.first(:lock => true)
  i.name = 'Jones'
  i.save
end
</ruby>

Powyższa sesja generuje następujący kod SQL dla bazy MySQL

<sql>
SQL (0.2ms)   BEGIN
Item Load (0.3ms)   SELECT * FROM `items` LIMIT 1 FOR UPDATE
Item Update (0.4ms)   UPDATE `items` SET `updated_at` = '2009-02-07 18:05:56', `name` = 'Jones' WHERE `id` = 1
SQL (0.8ms)   COMMIT
</sql>

Można również przekazać surowego SQL'a do opcji +:lock+ aby umożliwić różne typy blokad. Na przykład, MySQL posiada wyrażenie o nazwie +LOCK IN SHARE MODE+, za pomocą której możesz zablokować rekord, ale inne zapytania wciąż mogą go odczytać. Aby określić to wyrażenie po prostu prześlij je z opcją blokady:

<ruby>
Item.transaction do
  i = Item.find(1, :lock => "LOCK IN SHARE MODE")
  i.increment!(:views)
end
</ruby>

h3. Łączenie tabel

<tt>Model.find</tt> zapewnia opcję +:joins+ do określania klauzuli +JOIN+ na rezultatach SQL'a. Istnieje wiele różnych sposobów określania opcji +:joins+ :

h4. Using a String SQL Fragment

Wystarczy, że dostarczysz surowego SQL'a określając klauzulę +JOIN+ w opcji +:joins+. Na przykład:

<ruby>
Client.all(:joins => 'LEFT OUTER JOIN addresses ON addresses.client_id = clients.id')
</ruby>

Zaskutkuje to następującym kodem SQL:

<sql>
SELECT clients.* FROM clients LEFT OUTER JOIN addresses ON addresses.client_id = clients.id
</sql>

h4. Korzystanie z tablic/tablic asocjacyjnych zwanych asocjacjami.

WARNING: Ta metoda działa wyłącznie z +INNER JOIN+,

<br />

Moduł Active Record pozwala na korzystanie z nazw "associations":association_basics.html zdefiniowanych na modelu jako skróty dla określania opcji +:joins+.

Na przykład, biorąc pod uwagę następujące modele +Category+, +Post+, +Comments+ i +Guest+ :

<ruby>
class Category < ActiveRecord::Base
  has_many :posts
end

class Post < ActiveRecord::Base
  belongs_to :category
  has_many :comments
  has_many :tags
end

class Comments < ActiveRecord::Base
  belongs_to :post
  has_one :guest
end

class Guest < ActiveRecord::Base
  belongs_to :comment
end
</ruby>

Teraz wszystkie z następujących przyniosą oczekiwane dołączone zapytania używając +INNER JOIN+:

h5. Łączenie prostej asocjacji

<ruby>
Category.all :joins => :posts
</ruby>

Generuje to:

<sql>
SELECT categories.* FROM categories
  INNER JOIN posts ON posts.category_id = categories.id
</sql>

h5. Łączenie wielu asocjacji

<ruby>
Post.all :joins => [:category, :comments]
</ruby>

Generuje to:

<sql>
SELECT posts.* FROM posts 
  INNER JOIN categories ON posts.category_id = categories.id
  INNER JOIN comments ON comments.post_id = posts.id
</sql>

h5. Łączenie zagnieżdżonych asocjacji (jednopoziomowe)

<ruby>
Post.all :joins => {:comments => :guest}
</ruby>

h5. Łączenie zagnieżdżonych asocjacji (wielopoziomowe)

<ruby>
Category.all :joins => {:posts => [{:comments => :guest}, :tags]}
</ruby>

h4. Określanie warunków połączonych tabel

Możesz określić warunki połaćzonych tabel korzystając z warunków "Array":#array-conditions i "String":#pure-string-conditions. "Hash conditions":#hash-conditions zapewnia specjalną składnie dla określania warunków połączonych tabel:

<ruby>
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Client.all :joins => :orders, :conditions => {'orders.created_at' => time_range}
</ruby>

Alternatywną i czystszą składnią jest zagnieżdżenie warunków tablicy asocjacyjnej:

<ruby>
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Client.all :joins => :orders, :conditions => {:orders => {:created_at => time_range}}
</ruby>

Funkcja ta znajdzie wszystkich klientów, którzy złożyli wczoraj zamówienia, znów używając wyrażenia SQL +BETWEEN+.

h3. Eager Loading Associations

Eager loading to mechanizm ładujący rekordy asocjacyjne obiektów zwróconych przez +Model.find+ używając jak najmniejszej ilości zapytań.

<strong>N <plus> 1 problem zapytania</strong>

Rozważmy następujący kod, który wyszukuje 10 klientów i wypisuje ich kody pocztowe:

<ruby>
clients = Client.all(:limit => 10)

clients.each do |client|
  puts client.address.postcode
end
</ruby>

Ten kod wygląda dobrze na pierwszy rzut oka, ale problem leży w liczbie realizowanych zapytań. Powyższy kod realizuje 1 (do znalezienia 10 klientów) <plus> 10 ( jedno dla każdego klienta do załadowania adresu) = <strong>11</strong> zapytań.

<strong>Rozwiązanie dla N <plus> 1 problem zapytania</strong>

Moduł Active Record umożliwia określenie wszystkich asocjacji, które mają być ładowane. Jest to możliwe dzięki ustaleniu opcji +:include+ wywołania +Model.find+. Stosując +:include+, moduł Active Record zapewnia ładowanie wszystkich określonych asocjacji używając najmniejszej możliwej liczby zapytań.

Wracając do powyższego przypadku, moglibyśmy nadpisać +Client.all+ aby wykorzystać eager load addresses:

<ruby>
clients = Client.all(:include => :address, :limit => 10)

clients.each do |client|
  puts client.address.postcode
end
</ruby>

Powyższy kod wykona tylko <strong>2</strong> zapytania, w przeciwieństwie do <strong>11</strong> zapytań we wcześniejszym przykładzie:

<sql>
SELECT * FROM clients
SELECT addresses.* FROM addresses
  WHERE (addresses.client_id IN (1,2,3,4,5,6,7,8,9,10))
</sql>

h4. Eager Loading Multiple Associations

Active Record pozwala eager load każdą możliwą liczbę asocjacjiz pojedynczym wywołaniem +Model.find+ używając tablicy, tablicy asocjacyjnej lub zagnieżdżonej tablicy asocjacyjnej tablicy/tablicy asocjacyjnej z opcją +:include+.

h5. Tablica wielu asocjacji

<ruby>
Post.all :include => [:category, :comments]
</ruby>

Ładuje to wszystkie posty, stowarzyszone kategorie i komentarze do każdego posta.

h5. Zagnieżdżone asocjacje hash

<ruby>
Category.find 1, :include => {:posts => [{:comments => :guest}, :tags]}
</ruby>

Powyższy kod wyszukuje kategorie z id równym 1 i eager loads wszystkie posty stoważyszone z wyszukaną kategorią. Dodatkowo, it will also eager load wszystkie tagi postów i komentarze. Every comment's guest association will get eager loaded as well.

h4. Określanie warunków na asocjacji Eager Loaded

Nawet Active Record pozwala określić warunki, na asocjacji eager loaded tak jak  +:joins+, zalecanym sposobem jest użycie ":joins":#joining-tables. 

h3. Dynamiczne wyszukiwanie

Active Recors zapewnia metodę wyszukiwania dla każdego pola (również znanego jako atrybut), które definiujesz w tabeli. Jeśli na przykład posiadasz pole o nazwie +name+ w modelu +Client+, korzystasz za darmo z +find_by_name+ i +find_all_by_name+ z Active Record. Jeśli masz również pole +locked+ w modelu +Client+, możesz również użyć +find_by_locked+ oraz +find_all_by_locked+.

Możesz również wykorzystać metodę +find_last_by_*+, która wyszuka ostatnie rekordy pasujące do argumentu.

Możesz na końcu dynamicznego wyszukiwania określić wykrzyknik (<tt>!</tt>) aby  zgłosić błąd +ActiveRecord::RecordNotFound+ jeśli żaden rekord nie zostanie zwrócony, jak: +Client.find_by_name!("Ryan")+

Jeśli chcesz wyszukać zarówno po imieniu i zablokowane możesz połączyć ze sobą te wyszukania używając +and+ pomiędzy polami, na przykład +Client.find_by_name_and_locked("Ryan", true)+.


Istnieje jeszcze jeden zestaw dynamicznego wyszukiwania, który umożliwia stworzenie/zainicjowanie obiektów, jeśli nie zostały znalezione. Działa on w sposób podobny do pozostałych wyszukiwań i może być użyty jak +find_or_create_by_name(params[:name])+. Używając tej formuły najpierw zostanie wykonane wyszukiwanie, a następnie, jeśli zwróconą wartością będzie +nil+, stworzony zostanie nowy obiekt. SQL dla +Client.find_or_create_by_name("Ryan")+ wygląda następująco:

<sql>
SELECT * FROM clients WHERE (clients.name = 'Ryan') LIMIT 1
BEGIN
INSERT INTO clients (name, updated_at, created_at, orders_count, locked)
  VALUES('Ryan', '2008-09-28 15:39:12', '2008-09-28 15:39:12', 0, '0')
COMMIT
</sql>

+find_or_create+'s sibling, +find_or_initialize+, wyszuka obiekt i jeśli taki nie istnieje, to zadziała podobnie do wywołania +new+ z argumentami, które wprowadziłeś. Na przykład:

<ruby>
client = Client.find_or_initialize_by_name('Ryan')
</ruby>

albo przypisze istniejącego klienta o imieniu "Ryan" do klienta zmiennej lokalnej lub zainicjuje nowy obiekt podobnie do wywołania +Client.new(:name => 'Ryan')+. Od teraz możesz modyfikować pozostałe pola klienta wywołując na nim ustawienia atrybutu: +client.locked = true+ i gdy zechcesz zapisać je do bazy danych po prostu wywołaj na nich +save+.

h3. Wyszukiwanie za pomocą SQL

Jeśli chciałbyś skorzystać ze swojego własnego SQL'a w celu wyszukania rekordów w tabeli, możesz użyć +find_by_sql+. Metoda +find_by_sql+ zwróci tablicę obiektów. Możesz użyć takiego zapytania:

<ruby>
Client.find_by_sql("SELECT * FROM clients 
  INNER JOIN orders ON clients.id = orders.client_id 
  ORDER clients.created_at desc")
</ruby>

+find_by_sql+ oferuje prosty sposób nawiązywania połączeń z bazą danych i pobierania instancji obiektów.

h3. +select_all+

<tt>find_by_sql</tt> ma bliską relację zwaną +connection#select_all+. +select_all+ odzyska obiekty z bazy danych używając SQL klienta, takiego  +find_by_sql+, ale nie stworzy ich. W zamian otrzymasz tablicę hash'ów, gdzie każdy hash wskazuje na rekord.

<ruby>
Client.connection.select_all("SELECT * FROM clients WHERE id = '1'")
</ruby>

h3. Istnienie obiektów

Jeśli po prostu chcesz sprawdzić, czy dany obiekt istnieje, użyj metody zwanej +exists?+. Wyśle ona zapytanie do bazy danych używając tego samego zapytania, co +find+, ale zamiast zwrócić obiekt lub zbiór obiektów, zwróci +true+ lub +false+.

<ruby>
Client.exists?(1)
</ruby>

Metoda +exists?+ również pobiera wiele identyfikatorów, ale wyszukanie powiedzie się, jeśli zwrócona zostanie wartość true, czyli jeśli którykolwiek z wyszukiwanych rekordów istnieje.

<ruby>
Client.exists?(1,2,3)
# or
Client.exists?([1,2,3])
</ruby>

Co więcej, +exists+ pobiera opcje +conditions+ podobnie do wyszukania:

<ruby>
Client.exists?(:conditions => "first_name = 'Ryan'")
</ruby>

+exists?+ można również wykorzystać nie podając żadnych argumentów:

<ruby>
Client.exists?
</ruby>

Powyższe zapytanie zwróci +false+ jeśli tabela +clients+ jest pusta, w przeciwnym razie zwróci +true+.

h3. Obliczenia

Ten rozdział używa zliczania(count) jako przykładowej metody we wstępie, ale opisane opcje mogą być stosowane do wszystkich podpunktów.

<tt>count</tt> przyjmuje warunki w taki sam sposób jak +exists?+:

<ruby>
Client.count(:conditions => "first_name = 'Ryan'")
</ruby>

Które są wykonywane:

<sql>
SELECT count(*) AS count_all FROM clients WHERE (first_name = 'Ryan')
</sql>

Możesz do tego użyć również +:include+ lub +:joins+ aby zrobić to w bardziej złożony sposób:

<ruby>
Client.count(:conditions => "clients.first_name = 'Ryan' AND orders.status = 'received'", :include => "orders")
</ruby>

Co zostanie wykonane:

<sql>
SELECT count(DISTINCT clients.id) AS count_all FROM clients
  LEFT OUTER JOIN orders ON orders.client_id = client.id WHERE
  (clients.first_name = 'Ryan' AND orders.status = 'received')
</sql>

Kod ten określa +clients.first_name+ tylko w jednym przypadku, w którym jedna z przyłączonych tabeli posiada pole o nazwie +first_name+ i używa +orders.status+, ponieważ taka jest nazwa naszej dołączanej tabeli.

h4. Count

Jeśli chcesz zobaczyć, jak wiele rekordów znajduje się w twojej tabeli modelu, możesz wywołać +Client.count+, co zwróci ich ilość. Jeśli chcesz być bardziej szczegółowy i znaleźć wszystkich klientów z ich obecnym wiekiem, możesz użyć +Client.count(:age)+.

Aby znaleźć opcje, proszę zajrzyj do rozdziału "Calculations":#calculations.

h4. Average

Jeśli chcesz zobaczyć średnią pewnej liczby w jednej z twoich tabeli, możesz wywołać metodę +average+ na klasie, która odnosi się do tabeli. Wywołanie tej metody będzie wyglądało następując:

<ruby>
Client.average("orders_count")
</ruby>

Zwróci to numer (ewentualnie liczbę zmiennoprzecinkową, jak 3.14159265) reprezentujący średnią wartość w polu.

Opcje znajdziesz w rozdziale "Calculations":#calculations.

h4. Minimum

Jeśli chcesz znaleźć minimalną wartość pola w tabeli, możesz użyć metody +minimum+ na klasie, która odnosi się do tabeli. To wywołanie będzie wyglądac następująco:

<ruby>
Client.minimum("age")
</ruby>

Opcje znajdziesz w rozdziale "Calculations":#calculations.

h4. Maximum

Jeśli chcesz znaleźć maksymalna wartość pola w tabeli możesz użyć metody +maximum+ na klasie, która odnosi się do tabeli. To wywołanie metody będzie wyglądało następująco:

<ruby>
Client.maximum("age")
</ruby>

Opcje znajdziesz w rozdziale "Calculations":#calculations.

h4. Sum

Jeśli chcesz znaleźć sumę pola dla wszystkich rekordów w tabeli użyć metody +sum+ na klasie, która odnosi się do tabeli. To wywołanie metody będzie wyglądało następująco:

<ruby>
Client.sum("orders_count")
</ruby>

Opcje znajdziesz w rozdziale "Calculations":#calculations.

h3. Changelog

"Lighthouse ticket":http://rails.lighthouseapp.com/projects/16213-rails-guides/tickets/16

* February 7, 2009: Second version by "Pratik":credits.html#lifo
* December 29 2008: Initial version by "Ryan Bigg":credits.html#radar

